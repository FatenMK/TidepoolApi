title: Upload
description: Metadata about an upload of diabetes device data to the Tidepool platform.
allOf:
  - $ref: ./base.v1.yaml
  - type: object
    properties:
      byUser:
        $ref: ../../common/models/tidepooluserid.v1.yaml
      client:
        type: object
        properties:
          name:
            type: string
            pattern: "^[a-zA-Z0-9](|[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\\.[a-zA-Z0-9](|[a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))+$"
          version:
            type: string
            pattern: "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\+[0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*)?$"
          private:
            $ref: ./metadata.v1.yaml
      computerTime:
        type: string
        format: time
        description: |-
          An ISO 8601 formatted timestamp without any timezone offset information.

          The `computerTime` field encodes the *local* time at upload with no timezone offset information since we are storing `timezone` separately. We store this field in order to be able to audit and/or detect the correspondence between the user's browser time and the timezone they selected at the time of upload. If the user selected the timezone that was actually in effect for their browser at the time of upload, then applying the stored `timezone` to the UTC Zulu `time` field will match `computerTime`. If, on the other hand, the user selected a *different* timezone from that effective in their browser at the time of upload, applying the `timezone` to `time` will *not* match `computerTime`.

          There are some use cases when it is perfectly justified to select a timezone that does *not* reflect the browser's current timezone. For example, some insulin pump users do not change the time on their devices when traveling for short periods of time across many timezones, but when uploading a device a user should always choose the timezone that aligns with the most recent data on the device and thus that will *not* match the local browser timezone.
      dataSetType:
        type: string
        enum:
          - continuous
          - normal
      deviceManufacturers:
        type: array
        description: |-
          An array of string tags indicating the manufacturer(s) of the device.

          In order to avoid confusion resulting from referring to a single manufacturer with more than one name—for example, using both 'Minimed' and 'Medtronic' interchangeably—we restrict the set of strings used to refer to manufacturers to the set listed above and enforce *exact* string matches (including casing).

          `deviceManufacturers` is an array of one or more string "tags" because there are devices resulting from a collaboration between more than one manufacturer, such as the Tandem G4 insulin pump with CGM integration (a collaboration between `Tandem` and `Dexcom`).
        items:
          type: string
      deviceModel:
        type: string
        description: |-
          A string identifying the model of the device.

          The `deviceModel` is a non-empty string that encodes the model of device. We endeavor to match each manufacturer's standard for how they represent model name in terms of casing, whether parts of the name are represented as one word or two, etc.
      deviceSerialNumber:
        type: string
        description: |-
          A string encoding the device's serial number.

          The `deviceSerialNumber` is a string that encodes the serial number of the device. Note that even if a manufacturer only uses digits in its serial numbers, the SN should be stored as a string regardless.

          Uniquely of string fields in the Tidepool device data models, `deviceSerialNumber` *may* be an empty string. This is essentially a compromise: having the device serial number is extremely important (especially for e.g., clinical studies) but in 2016 we came across our first case where we *cannot* recover the serial number of the device that generated the data: Dexcom G5 data uploaded to Tidepool through Apple iOS's HealthKit integration.
      deviceTags:
        type: array
        description: |-
          An array of string tags indicating the function(s) of the device.

          The `deviceTags` array should be fairly self-explanatory as an array of tags indicating the function(s) of a particular device. For example, the Insulet OmniPod insulin delivery system has the tags `bgm` and `insulin-pump` since the PDM is both an insulin pump controller and includes a built-in blood glucose monitor.
        items:
          anyOf:
            - enum:
                - bgm
                - cgm
                - insulin-pump
          type: string
      timeProcessing:
        type: string
        enum:
          - across-the-board-timezone
          - none
          - utc-bootstrapping
        description: |-
          A string indicating what variety of processing was used to create the `time` and related fields such as `timezoneOffset` on data in this upload.

          For data auditing purposes, we store a string encoding the type of algorithm used to generate the `time`, `timezoneOffset`, and other related fields from the local `deviceTime`. At present, there are only three options for this value:
          - `across-the-board-timezone` for devices (all BGMs, for example) that cannot have their `deviceTime` values ["bootstrapped" to a UTC `time` value](http://developer.tidepool.io/chrome-uploader/docs/BootstrappingToUTC.html); in such cases, we apply a single user-selected timezone to every `deviceTime` "across the board" to generate the `time` value.
          - `utc-bootstrapping` for devices (most insulin pumps and CGMs) where we use a combination of the user-selected timezone at time of upload, the most recent timestamp on device, and the history of display time changes on the device to infer the correct `time` value for each record.
          - `none` for data sources that already include a UTC-anchored `time` value. At present, the *only* data source for which this is true is Dexcom G5 data coming through Apple's iOS HealthKit integration.
      version:
        type: string
        minLength: 5
        description: |-
          A string encoding the version of the uploading client.

          A string identifying the software version of the uploading client. For the Chrome uploader, this will be a [semver](http://semver.org/ 'semver')—for example, `1.25.2`. For other uploading clients such as Tidepool iOS applications, the format includes the namespace and semver of the app: `org.tidepool.blipnotes:1.25:2`.
      type:
        type: string
        enum:
          - upload
        description: The string `upload`.
x-tags:
  - data
