openapi: 3.0.0
info:
  title: Common Elements
  version: '1.0'
  license:
    name: BSD-2-Clause
    url: https://opensource.org/licenses/BSD-2-Clause
  contact:
    name: API Support
    email: support@tidepool.org
    url: https://support.tidepool.org/
  description: Common components used across all Tidepool APIs
paths: {}
servers:
  - url: 'http://localhost:8080'
    description: local development
  - url: 'https://dev1.dev.tidepool.org'
    description: dev1
  - url: 'https://qa1.development.tidepool.org'
    description: qa1
  - url: 'https://qa2.development.tidepool.org'
    description: qa2
  - url: 'https://external.integration.tidepool.org'
    description: integration
  - url: 'https://api.tidepool.org'
    description: production
components:
  parameters:
    tidepool-session-token:
      name: x-tidepool-session-token
      in: header
      schema:
        type: string
    tp-userid-param:
      name: userId
      in: path
      required: true
      description: A Tidepool User ID
      schema:
        type: string
        minLength: 10
        maxLength: 10
        pattern: ^[a-f0-9]+
    tidepool-trace-request:
      name: x-tidepool-trace-request
      in: header
      description: >-
        An optional, unique identifier specified by the client automatically
        associated with all server logging occurring during the request.

        If not specified, then a new identifier is generated and returned in the matching response header.
      schema:
        type: string
        minLength: 1
        maxLength: 64
    tidepool-trace-session:
      name: x-tidepool-trace-session
      in: header
      description: >-
        An optional, unique identifier specified by the client automatically
        associated with all server logging occurring during a 'session' of
        requests.

        It is up to the client to determine how a 'session' is defined. If specified, then the identifer is returned in the matching response header.
      schema:
        type: string
        minLength: 1
        maxLength: 64
  responses:
    bad-request:
      description: Bad Request
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/error-response'
        application/json:
          examples:
            response:
              value:
                code: 400
                reason: Missing id and/or password
    unauthorized:
      description: Unauthorized
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/error-response'
        application/json:
          examples:
            response:
              value:
                code: 401
                reason: No user matched the given details
    user-data:
      description: User Data
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/user-data'
        application/json:
          examples:
            response:
              value:
                emailVerified: true
                emails:
                  - example@tidepool.org
                termsAccepted: 2018-12-10T09:00:00-08:00
                userid: '1234567890'
                username: example@tidepool.org
  securitySchemes:
    sessionToken:
      type: apiKey
      in: header
      name: x-tidepool-session-token
  schemas:
    user-id:
      type: string
      title: User ID
      description: Tidepool User ID
      minLength: 10
      maxLength: 10
      pattern: ^[a-f0-9]{10}
    StatusAndData:
      type: object
      title: Status and Data Response
      properties:
        data:
          type: object
        meta:
          type: object
          properties:
            trace:
              type: object
              properties:
                request:
                  type: string
                session:
                  type: string
    Accuracy:
      type: object
      properties:
        units:
          type: string
          enum:
            - feet
            - meters
        value:
          oneOf:
            - description: If `units` is in `meters`
              format: double
              minimum: 0
              maximum: 1000
            - description: If `units` is in `feet`
              format: double
              minimum: 0
              maximum: 3280
          type: number
      required:
        - units
    Association:
      type: object
      description: Associate this resource with another Tidepool resource ID.
      properties:
        id:
          type: string
          description: The ID of the associated Tidepool resource if type is blob, datum,
            or image.
        reason:
          type: string
          description: The reason for the association.
          minLength: 1
          maxLength: 1000
        type:
          type: string
          enum:
            - blob
            - datum
            - image
            - url
          description: The type of the association. If type is `blob`, `datum`, or `image`,
            then `id` must also be specified. If type is `url`, then url must
            also be specified.
        url:
          type: string
          format: uri
          description: The URL of the asssociation if type is `url`.
      required:
        - type
    AssociationArray:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/Association'
      description: An array of `Association`s for the resource.
    Elevation:
      type: object
      properties:
        units:
          type: string
          enum:
            - feet
            - meters
        value:
          oneOf:
            - description: If `units` is in `meters`
              format: double
              minimum: 0
              maximum: 10000
            - description: If `units` is in `feet`
              format: double
              minimum: 0
              maximum: 32808
          type: number
      required:
        - units
    GPS:
      type: object
      description: GPS co-ordinates and related information.
      properties:
        elevation:
          $ref: '#/components/schemas/Elevation'
        floor:
          type: integer
          minimum: -1000
          maximum: 1000
        horizontalAccuracy:
          $ref: '#/components/schemas/Accuracy'
        latitude:
          type: object
          required:
            - units
            - value
          properties:
            units:
              type: string
              enum:
                - degrees
            value:
              type: number
              format: double
              minimum: -90
              maximum: 90
        longitude:
          type: object
          required:
            - units
            - value
          properties:
            units:
              type: string
              enum:
                - degrees
            value:
              type: number
              format: double
              minimum: -180
              maximum: 180
        origin:
          $ref: '#/components/schemas/Origin'
        verticalAccuracy:
          $ref: '#/components/schemas/Accuracy'
      required:
        - latitude
        - longitude
    Origin:
      type: object
      description: External origin information for the source of the resource.
      properties:
        id:
          type: string
          maxLength: 100
          description: Any external identifier uniquely identifying the resource at the
            origin source.
        name:
          type: string
          description: A human-readable name for the origin source.
          minLength: 1
          maxLength: 100
        origin:
          $ref: '#/components/schemas/Origin'
        payload:
          $ref: '#/components/schemas/Payload'
        time:
          $ref: '#/components/schemas/datetime'
        type:
          type: string
          enum:
            - application
            - device
            - manual
            - service
          description: The type of the origin source.
        version:
          type: string
          description: The version of the origin source at the time the resources was
            obtained.
          minLength: 1
          maxLength: 100
    Payload:
      type: object
      description: Additional user-specified metadata. The maximum size is 4K bytes.
    Location:
      type: object
      description: Location information associated with the resource. One or both of `name`
        and `gps` must be specified.
      properties:
        gps:
          $ref: '#/components/schemas/GPS'
        name:
          type: string
          description: A name for the location.
          minLength: 1
          maxLength: 100
    Note:
      type: string
      description: A note associated with the resource.
      minLength: 1
      maxLength: 1000
    NoteArray:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/Note'
    Tag:
      type: string
      description: A tag associated with the resource.
      minLength: 1
      maxLength: 100
    TagArray:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/Tag'
    Annotation:
      type: object
      properties: {}
    AnnotationArray:
      type: array
      items:
        $ref: '#/components/schemas/Annotation'
    user-email:
      type: string
      format: email
      description: Tidepool User Email
      minLength: 3
      example: example@tidepool.org
      title: User Email
    datetime:
      type: string
      format: date-time
      title: Date/Time
      description: RFC3339/ISO8601 date & time
    user-data:
      type: object
      title: User Data
      description: Tidepool User Data
      properties:
        emailVerified:
          type: boolean
          description: True if email address has been verified
        emails:
          type: array
          description: Additional Tidepool user email addresses
          items:
            $ref: '#/components/schemas/user-email'
        termsAccepted:
          $ref: '#/components/schemas/datetime'
        userid:
          $ref: '#/components/schemas/user-id'
        username:
          $ref: '#/components/schemas/user-email'
    error-response:
      type: object
      properties:
        code:
          type: integer
          description: Error reason code
        reason:
          type: string
          description: Error reason text
      title: Error Response
    JSONPatch:
      oneOf:
        - properties:
            op:
              type: string
              description: The operation to perform.
              enum:
                - add
                - replace
                - test
            path:
              type: string
              description: A JSON Pointer path.
            value:
              description: The value to add, replace or test.
          required:
            - op
            - path
            - value
        - properties:
            op:
              type: string
              description: The operation to perform.
              enum:
                - remove
            path:
              type: string
              description: A JSON Pointer path.
          required:
            - op
            - path
        - properties:
            op:
              type: string
              description: The operation to perform.
              enum:
                - move
                - copy
            from:
              description: A JSON Pointer path pointing to the location to move/copy from.
              type: string
            path:
              type: string
              description: A JSON Pointer path.
          required:
            - op
            - from
            - path
      type: object
      description: Only have this here because Stoplight doesn't seem to like using the
        JSONSchema directly as a ref from http://json.schemastore.org/json-patch