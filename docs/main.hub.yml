title: Developer Docs (preliminary)
header:
  nav:
    left: []
    center: []
    right:
      - title: API Reference
        path: /api-reference
      - title: Help
        path: 'https://support.tidepool.org'
pages:
  /:
    title: Home
    data:
      blocks:
        - type: text
          data: >+
            # Welcome to Tidepool's developer documentation 


            This guide will be your Obi-Wan Kenobi for all things Platform
            (Tidepool's API platform) and will run you through the how-to's of
            accessing, fetching and using your Tidepool data. But who is
            Tidepool? What is API? 


            We're so glad you asked. 


            Tidepool is a nonprofit organization committed to providing free
            software for the diabetes community to get the most out of their
            diabetes devices. An API, or application programming interface, is a
            tool that allows you to communicate with other applications, i.e.
            access your diabetes data by talking to your devices. 


            For more information on who we are and what we do, click the pretty
            blue link: [tidepool.org](http://www.tidepool.org) 


            Awesome. Now that we're all caught up, [let's jump right
            in!](/quick-start)

      children:
        - title: Quick Start
          route:
            path: /quick-start
          data:
            blocks:
              - type: text
                data: '# Getting started'
              - type: callout
                data:
                  type: success
                  title: Prerequisites
                  body: >-
                    Before you begin, you will need to create a [Tidepool user
                    account](http://int-app.tidepool.org/signup). It's free and
                    should take you less than two minutes. You can also download
                    [curl](http://curl.haxx.se/download.html) or
                    [Postman](http://app.getpostman.com/run-collection/9b665f2fb9a8a483bf30?via=clientlibraries)
                    onto your computer (this isn't strictly required but is
                    strongly encouraged).
              - type: text
                data: >-
                  ---


                  ### Table of contents


                  1. [Authentication](#authentication)

                  2. [Access user accounts](#access-user-accounts)

                  3. [Keep reading](#keep-reading)


                  ---


                  ## Authentication


                  To get access to your diabetes data, you will  need to get an
                  **authorization session token** using your master account
                  credentials. To do this, issue the following command through
                  curl or Postman (NB: if you're doing this through the in-built
                  HTTP request maker, you will need to go into the Auth tab and
                  hit "update request" to post successfully):


                  ```

                  curl -i -X POST -u [your account email]:[your account
                  password] https://int-api.tidepool.org/auth/login 

                  ```
              - type: http
                data:
                  method: post
                  url: 'https://int-api.tidepool.org/auth/login'
                  auth:
                    type: basic
                    username: '{$$.env.username}'
                    password: '{$$.env.password}'
                  headers:
                    Authorization: >-
                      Basic
                      bGVubmFydEB0aWRlcG9vbC5vcmc6bk1uN3tYTTIoRnokM0pHQ3o2UUx4aHQ=
                header:
                  title: Authentication login
              - type: text
                data: >-
                  This will return an HTTP response that looks like this:


                  ```

                  access-control-allow-headers: authorization, content-type,
                  x-tidepool-session-token

                  access-control-allow-methods: GET, POST, PUT

                  x-tidepool-session-token:
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkdXIiOjIuNTkyZSswNiwiZXhwIjoxNDcxMTM0MzIzLCJzdnIiOiJubyIsInVzciI6IjU0YzkwZmIzMjUifQ.bbkzG_rwp9IVMI3HVYm_ct8mMW_YTnTALUW12345678

                  Connection: keep-alive

                  {
                    "emailVerified": true,
                    "emails": [
                      "demo+intpublicclinic@tidepool.org"
                    ],
                    "termsAccepted": "2017-08-16T10:30:5607:00",
                    "userid": "4533925fea",
                    "username": "demo+intpublicclinic@tidepool.org"
                  }

                  ````


                  From the response headers, save the **Tidepool session
                  token**. From the response body, save the **user ID**,
                  excluding the quotation marks.


                  ---


                  ## Access user accounts


                  The following command returns user information associated with
                  the given user ID. This step is only necessary if you have not
                  previously stored the user IDs you wish to access:


                  ```

                  curl -s -X GET -H "x-tidepool-session-token:
                  <your-session-token>" -H "Content-Type: application/json"
                  'https://int-api.tidepool.org/metadata/users/<your-userid>/users'

                  ```
              - type: http
                data:
                  url: >-
                    https://int-api.tidepool.org/metadata/users/{$$.env.userid}/users
                  method: get
                  headers:
                    x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                header:
                  title: Fetch user IDs
              - type: text
                data: >
                  From this list, find the user ID of the patient (or study
                  subject) whose data you wish to fetch. Continuing with our
                  example, we would use:


                  ```

                  curl -s -X GET -H "x-tidepool-session-token: ey...uk" -H
                  "Content-Type: application/json"
                  "https://int-api.tidepool.org/metadata/users/4533925fea/users"

                  ```
              - type: http
                data:
                  method: get
                  url: >-
                    https://int-api.tidepool.org/metadata/users/{$$.env.userid}/users
                  headers:
                    x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                header:
                  title: Fetch user metadata
              - type: text
                data: >-
                  This request will return something like this:


                  ```

                  [
                    {
                      "emailVerified": true,
                      "emails": [
                        "demo+jill@tidepool.org"
                      ],
                      "termsAccepted": "2017-08-03T12:19:54-07:00",
                      "userid": "5d509deb6b",
                      "username": "demo+jill@tidepool.org",
                      "trustorPermissions": {
                        "view": {}
                      },
                      "profile": {
                        "fullName": "Jill Jellyfish",
                        "patient": {
                          "birthday": "2000-01-01",
                          "diagnosisDate": "2000-01-01",
                          "targetDevices": [
                            "omnipod",
                            "dexcom"
                          ],
                          "targetTimezone": "US/Pacific"
                        }
                      }
                    },
                    {
                      "userid": "0223d994e9",
                      "trustorPermissions": {
                        "custodian": {},
                        "upload": {},
                        "view": {}
                      },
                      "profile": {
                        "fullName": "Marissa Medpumper",
                        "patient": {
                          "birthday": "2000-01-17",
                          "mrn": "123456-mm",
                          "targetDevices": [
                            "carelink"
                          ],
                          "targetTimezone": "US/Pacific"
                        }
                      }
                    }
                  ]

                  ```


                  As you can see, this example master account has view access
                  for two kinds of user accounts:


                  1. Jill Jellyfish has a personal account that she has shared
                  with the master account. 


                  2. Marissa Medpumper has a custodial account that was created
                  in-clinic by the master account. Marissa was not invited or
                  has not claimed her personal account, so there is no email
                  associated with the profile.


                  ---


                  ### Keep reading


                  * [Fetching device data](/quick-start/fetching-device-data)

                  * [Fetching user notes](/quick-start/notes)

                  * [Uploading device data](/quick-start/uploading-device-data)
            children:
              - title: Fetching Device Data
                route:
                  path: /fetching-device-data
                data:
                  blocks:
                    - type: text
                      data: '# Fetching device data'
                    - type: callout
                      data:
                        title: Are you authenticated?
                        body: >-
                          Make sure you have a [Tidepool session
                          token](/quick-start#authentication) before trying to
                          fetch data.
                        type: success
                    - type: text
                      data: "---\n\n### Table of contents\n1. [Fetch device data](#fetch-device-data)\n2. [Query parameters](#query-parameters)\n3. [Fetch Dexcom CGM data](#fetch-dexcom-cgm-data)\n4. [Keep reading](#keep-reading)\n\n---\n\n## Fetch device data\n\nTo fetch data for authorized accounts, issue the following command: \n```\ncurl -s -X GET -H \"x-tidepool-session-token: <your-session-token>\" -H \"Content-Type: application/json\" \"https://int-api.tidepool.org/data/<subject-userid>\"\t\n```\n"
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://int-api.tidepool.org/data/<{$$.env.subject-userid}>
                        headers:
                          x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                      header:
                        title: Fetch device data
                    - type: text
                      data: "Subject user ID is the Tidepool user ID of the user whose data you want to view.\n\n---\n\n## Query parameters\nYou can narrow the fetch query by specifying a type, sub-type and/or date query parameter to Platform's URL. Comma-separated lists will return data matching any of the specified types (see [GitHub](http://github.com/tidepool-org/tide-whisperer/blob/master/tide-whisperer.go#L193) comments for more detail):\n\n| Parameter | Type | Effect | Example\n| --- | --- | --- | --- |\n| Device ID | String | Only objects with a device ID field matching the specified device ID param will be returned. | E.g. `/data/userid?deviceId=abcdef0123456789`\n| End date | String (in ISO-8601 date/time format) | Only objects with time field less than or equal to end date will be returned. | E.g. `?endDate=2015-10-10T15:00:00.000Z`\n| Latest data | Boolean | Returns only the most recent results for each type matching the results filtered by the other query parameters. | All types: `?latest=true` or single type: `?latest=true&type=cbg` \n| Start date | String (in ISO-8601 date/time format) | Only objects with time field equal to or greater than start date will be returned. | E.g. `?startDate=2015-10-10T15:00:00.000Z` \n| Sub-type | String | Only objects with a subtype field matching the specified subtype param will be returned. | Single type: `/data/userid?subtype=physicalactivity` Comma-separated list: `/data/userid?subtype=physicalactivity,steps`\n| Type | String (data model type) |  Only objects with a type field matching the specified type param will be returned. | Single type: `/data/<userid>?type=smbg` Comma-separated list: `data/<userid>?type=smgb,cbg`\n| Upload ID | String | Only objects with an upload ID field matching the specified upload ID param will be returned. If upload ID is specified, ignore the “special” filters below. | E.g. `/data/userid?uploadId=0123456789abcdef`\n\nIn addition, there are several “special” parameters that have an effect on the data that is returned depending on more detailed internal business logic.\n\n| Parameter | Type | Effect | Example\n| --- | --- | --- | --- |\n| Carelink | Boolean | Return data from the now-deprecated CareLink import, unless data for the same time period has been uploaded using the Uploader (the device manufacturers field contains the string Medtronic). | E.g. `/data/userid?carelink=true`\n| Dexcom | Boolean | Return CGM data from *only* the Dexcom API, even if other CGM data exists from other sources. | E.g. `/data/userid?dexcom=true`\n| Medtronic | Boolean | Return CGM, Basal and Bolus data from Medtronic Uploads, provided that data exists after `2017-09-01`. Unless data from a Medtronic device has been uploaded by Loop via HealthKit (`origin.payload.device.manufacturer` is Medtronic), and that data exists after `2017-09-01`. | E.g. `/data/userid?medtronic=true`\n\n### Example \nTo fetch just the pump settings for Jill Jellyfish, use:\n\n```\ncurl -s -X GET -H \"x-tidepool-session-token: <your-session-token>\" -H \"Content-Type: application/json\" \"https://int-api.tidepool.org/data/5d509deb6b?type=pumpSettings\"\t\n```"
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://int-api.tidepool.org/data/{$$.env.subject-userid}
                        headers:
                          x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                        query:
                          type: pumpSettings
                      header:
                        title: Fetch pump settings
                    - type: callout
                      data:
                        body: >-
                          All glucose data in Tidepool is stored in mmol/L. To
                          convert to mg/dL, multiply by 18.01559.
                    - type: text
                      data: >-
                        ---


                        ## Fetch Dexcom CGM data


                        Tidepool gives users the ability to [link their Dexcom
                        account](https://godoc.org/github.com/tidepool-org/shoreline/oauth2)
                        to their Tidepool account to fetch Dexcom data. This
                        creates the possibility of duplicate or overlapping data
                        if the user is also using Tidepool Mobile or Tidepool
                        Uploader to upload their Dexcom data.


                        If the standard GET data Tidepool API is used, then only
                        Dexcom API CGM data will be returned within this time
                        range, and any other CGM data from any other source
                        (Tidepool Uploader, HealthKit via Tidepool Mobile, etc.)
                        will only be returned outside of this time range.


                        So, you have three time ranges that apply here:


                        | Start Time | End Time | CGM Data Returned

                        | --- | --- | --- |

                        | Beginning of Time | Dexcom API Earliest Data Time |
                        All CGM Data

                        | Dexcom API Earliest Data Time | Dexcom API Latest Data
                        Time |   Only Dexcom API CGM Data

                        | Dexcom API Latest Data Time | End of Time | All CGM
                        data


                        However, if you use the standard GET data Tidepool API,
                        but add the dexcom true (`"?dexcom=true"`) request flag,
                        then it will return all CGM data from all sources,
                        regardless of the Dexcom API state.


                        ---


                        ### Keep reading


                        * [Command line data
                        tools](http://github.com/tidepool-org/command-line-data-tools) 

                        * [Diabetes device data model](/device-data)

                        * [Fetching user notes](/quick-start/notes)

                        * [Uploading device
                        data](/quick-start/uploading-device-data)
              - title: Fetching User Notes
                route:
                  path: /notes
                data:
                  blocks:
                    - type: text
                      data: "# Fetching user notes \n\nYou can fetch user notes by issuing the following command: \n\n```\ncurl -s -X GET -H \"x-tidepool-session-token: <your-session-token>\" -H \"Content-Type: application/json\" \"https://int-api.tidepool.org/message/notes/<subject-userid>\"\t\n```"
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://int-api.tidepool.org/message/notes/<{$$.env.subject-userid}>
                        headers:
                          x-tidepool-session-header: '{$$.env.x-tidepool-session-header}'
                      header:
                        title: Fetch user notes
                    - type: text
                      data: "You can also specify start time and end time in ISO date/time format to search for data relating to a specific event (similar to [query parameters](/quick-start/fetching-device-data#query-parameters)): \n\n\t`?starttime=2015-10-10T15:00:00.000Z&endtime=2015-10-11T15:00:00.000Z` "
                    - type: http
                      data:
                        url: >-
                          https://int-api.tidepool.org/message/notes/{$$.env.subject-userid}
                        headers:
                          x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                        query:
                          starttime: '2015-10-10T15:00:00.000Z'
                          endtime: '2015-10-11T15:00:00.000Z'
                      header:
                        title: Fetch user notes within query parameters
              - title: Uploading Device Data
                route:
                  path: /uploading-device-data
                data:
                  blocks:
                    - type: text
                      data: "# Uploading device data\n\n---\n\n### Table of contents\n\n1. [Choosing a client name](#choosing-a-client-name)\n2. [Data upload session types](#data-upload-session-types)\n\t1. [Normal upload sessions](#normal-upload-sessions-normal)\n\t2. [Continuous upload sessions](#continuous-upload-sessions-continuous)\n3. [Upload deduplicators](#upload-deduplicators)\n4. [Keep reading](#keep-reading)\n\n---\n\n## Choosing a client name\nYou will need to choose a \"client name\" for your app. A \"client name\" is used to identify data in the Tidepool Platform that your app has created.\nWe recommend using [reverse DNS notation](https://en.wikipedia.org/wiki/Reverse_domain_name_notation) to identify your app/service. For example:\n\n* `com.mycompany.TidepoolUploader` (company) \n* `com.github.pazaan.600SeriesAndroidUploader` (personal project)\n\nYour client will also need to provide a [Semantic Version](https://semver.org/) to identify which version of your app/service is uploading data.\n\n---\n\n## Data upload session types\nPlatform has two data upload modes:\n* [Normal](/device-data/uploading-device-data/normal)\n* [Continuous](/device-data/uploading-device-data/continuous)\n\nYou will need to determine which mode is the best to use for your upload implementation.\n\n---\n\n### Normal upload sessions (`normal`)\nA normal upload session is used for \"bulk\" uploads.\n\nAn example of this is the Tidepool Uploader: When you use Tidepool Uploader, you are connecting a device to your computer, and using the Tidepool Uploader to read a large set of historical data from the device. Tidepool Uploader will create a normal upload session, and close that session when all data for that diabetes device has been uploaded.\n\nSubsequent uploads for the same device will create a _new_ normal upload session, and this data will be deduplicated against any previous sessions.\n\n---\n\n### Continuous upload sessions (`continuous`)\nA continuous upload session is used for devices that have the ability to connect to the internet (either directly or via a tethered device), and frequently upload data to the Tidepool platform.\n\nAn example of this is Tidepool Mobile, which uploads updates from the Dexcom or Loop apps (via HealthKit) every 5 minutes.\n\nYou are still able to use a continuous upload session to upload a large amount of historical data.\n\n---\n\n## Upload deduplicators\n_TODO: Section on deduplicators goes here_\n\n---\n\n### Keep reading\n\n* [Using a continuous upload session](/quick-start/uploading-device-data/continuous)\n* [Using a normal upload session](/quick-start/uploading-device-data/normal)"
                  children:
                    - title: Using a Continuous Upload Session
                      route:
                        path: /continuous
                      data:
                        blocks:
                          - type: text
                            data: >-
                              # Uploading data in a continuous session
                              (`continuous`)
                          - type: callout
                            data:
                              title: Are you authenticated?
                              body: >-
                                Make sure that you have a [Tidepool session
                                token](/getting-started/auth) before trying to
                                fetch data.
                              type: success
                          - type: text
                            data: >-
                              ---


                              ### Table of contents


                              1. [Open a new continuous
                              session](#open-a-new-continuous-session)

                              2. [Find an existing continuous
                              session](#find-an-existing-continuous-session)

                              3. [Upload device data to the open
                              session](#upload-device-data-to-the-open-session)

                              4. [Keep reading](#keep-reading)


                              ---


                              ## Open a New Continuous Session


                              If you have previously opened a continuous
                              session, [skip
                              ahead](#find-an-existing-continuous-session).
                              Otherwise, issue the following command:


                              ```

                              curl -X POST
                              https://int-api.tidepool.org/v1/users/<subject-userid>/data_sets
                              -H 'x-tidepool-session-token:
                              <your-session-token>' --data-binary '{ "client": {
                              "name": "<client-name>", "version":
                              "<client-version>" }, "dataSetType": "continuous",
                              "deduplicator": { "name":
                              "org.tidepool.deduplicator.dataset.delete.origin"
                              } }'

                              ```
                          - type: http
                            data:
                              method: post
                              url: >-
                                https://int-api.tidepool.org/v1/users/{$$.env.subject-userid}/data_sets
                              headers:
                                x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                              body: >-
                                { "client": { "name": "{$$.env.client-name}",
                                "version": "{$$.env.client-version}" },
                                "dataSetType": "continuous", "deduplicator": {
                                "name":
                                "org.tidepool.deduplicator.dataset.delete.origin"
                                } }
                            header:
                              title: Open a continuous session
                          - type: text
                            data: >-
                              This will return an HTTP response with a JSON
                              body. You should store **the value of the upload
                              session ID** to use when uploading data to this
                              session.


                              ```

                              {
                                "data": {
                                  "createdTime": "2019-08-29T08:05:25.851Z",
                                  "deduplicator": {
                                    "name": "org.tidepool.deduplicator.dataset.delete.origin",
                                    "version": "1.0.0"
                                  },
                                  "id": "<upload-session-id>",
                                  "modifiedTime": "2019-08-29T08:05:25.889Z",
                                  "type": "upload",
                                  "uploadId": "<upload-session-id>",
                                  "client": {
                                    "name": "<client-name>",
                                    "version": "<client-version>"
                                  },
                                  "dataSetType": "continuous"
                                }
                              }

                              ```


                              ---


                              ## Find an existing continuous session 


                              If you have previously opened a continuous
                              session, you can use this request to get the
                              session ID if you haven't cached it somewhere (if
                              you already know your session ID, [skip
                              ahead](#upload-device-data-to-the-open-session)):


                              ```

                              curl
                              https://int-api.tidepool.org/v1/users/<subject-userid>/data_sets?client.name=<client-name>
                              -H 'x-tidepool-session-token:
                              <your-session-token>'

                              ```
                          - type: http
                            data:
                              method: get
                              url: >-
                                https://int-api.tidepool.org/v1/users/{$$.env.subject-userid}/data_sets
                              query:
                                client.name: <client-name>
                              headers:
                                x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                            header:
                              title: Find an existing continuous session
                          - type: text
                            data: >+
                              This will return an HTTP response with a JSON
                              body. You should temporarily store the value of
                              the upload session ID you intend to write data to.


                              ```

                              [
                                {
                                  "client": {
                                    "name": "<client-name>",
                                    "version": "<client-version>"
                                  },
                                  "createdTime": "2019-08-28T02:54:41.869Z",
                                  "dataSetType": "continuous",
                                  "deduplicator": {
                                    "name": "org.tidepool.deduplicator.dataset.delete.origin",
                                    "version": "1.0.0"
                                  },
                                  "id": "<upload-session-id>",
                                  "modifiedTime": "2019-08-28T02:54:41.896Z",
                                  "type": "upload",
                                  "uploadId": "<upload-session-id>"
                                }
                              ]

                              ```


                              ---


                              ## Upload device data to the open session

                              Upload data in chunks of 1,000 records:


                              ```

                              curl
                              'https://int-api.tidepool.org/dataservices/v1/datasets/<upload-session-id>/data'
                              –H 'x-tidepool-session-token:
                              <your-session-token>' –H 'Content-Type:
                              application/json' --data-binary '[<array of
                              diabetes device data objects>]'

                              ```

                          - type: http
                            data:
                              method: post
                              url: >-
                                https://int-api.tidepool.org/dataservices/v1/datasets/{$$.env.upload-session-id}/data
                              headers:
                                x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                              body: >-
                                [<{$$.env.array} of diabetes device data
                                objects>]
                            header:
                              title: Upload data to the open session
                          - type: text
                            data: >+
                              The body for this HTTP POST should be JSON, and
                              follow the format outlined in the [diabetes data
                              types](/device-data/data-types) documentation.


                              When you upload data for a continuous session, you
                              will also need to provide an "origin" field for
                              every data object, that contains at least an ID,
                              name and type. The ID is a unique identifier
                              within your upload session that allows you to
                              identify that data point.


                              As an example, uploading a couple of continuous
                              blood glucose (CBG) records might look like this:

                              ```

                              curl
                              'https://int-api.tidepool.org/dataservices/v1/datasets/<upload-session-id>/data'
                              -H 'x-tidepool-session-token:
                              <your-session-token>' -H 'Content-Type:
                              application/json' --data-binary
                              '[{"time":"2017-02-05T13:26:51.000Z","timezoneOffset":660,"clockDriftOffset":0,"conversionOffset":0,"deviceTime":"2017-02-06T00:26:51","deviceId":"MMT-1711:12345678","type":"cbg","value":119,"units":"mg/dL","origin":{"id":"06b10116-e85c-4abe-8a35-4eca838bd484","name":"com.apple.HealthKit","type":"service"},"payload":{"interstitialSignal":24.98}},{"time":"2017-02-05T13:31:51.000Z","timezoneOffset":660,"clockDriftOffset":0,"conversionOffset":0,"deviceTime":"2017-02-06T00:31:51","deviceId":"MMT-1711:12345678","type":"cbg","value":120,"units":"mg/dL","origin":{"id":"1c26886a-ae52-4e43-84cf-5047afe3efc3","name":"com.apple.HealthKit","type":"service"},"payload":{"interstitialSignal":25.22}}]'

                              ```


                          - type: callout
                            data:
                              type: error
                              body: >-
                                Do not close the session after you have uploaded
                                your data, as you would for a normal session
                                type. If you _do_ close a continuous session,
                                you will not be able to write to it, and will
                                need to open a new one.
                          - type: text
                            data: >-
                              ---


                              ### Keep reading


                              * [Diabetes data types](/device-data/data-types)

                              * [Diabetes device data model](/device-data)

                              * [Using a normal upload
                              session](/quick-start/uploading-device-data/normal)
                    - title: Using a Normal Upload Session
                      route:
                        path: /normal
                      data:
                        blocks:
                          - type: text
                            data: '# Uploading data in a normal session (`normal`)'
                          - type: callout
                            data:
                              title: Are you authenticated?
                              body: >-
                                Make sure that you have a [Tidepool session
                                token](/getting-started/auth) before trying to
                                fetch data.
                              type: success
                          - type: text
                            data: >-
                              ---

                              ### Table of contents


                              1. [Open a normal session](#open-a-normal-session)

                              2. [Upload device data to the normal
                              session](#upload-normal-device-data-to-the-normal-session)

                              3. [Close the upload
                              session](#close-the-upload-session)

                              4. [Keep reading](#keep-reading)


                              ---


                              ## Open a normal session


                              ```

                              curl
                              'https://int-api.tidepool.org/dataservices/v1/users/<subject-userid>/data_sets'
                              -H 'x-tidepool-session-token:
                              <your-session-token>' -H 'Content-Type:
                              application/json' --data-binary
                              '<upload-post-data>'

                              ```


                              The body for this HTTP POST should be JSON, and
                              follow the format outlined in the [diabetes data
                              types](/data-types) documentation.
                          - type: http
                            data:
                              url: >-
                                https://int-api.tidepool.org/dataservices/v1/users/{$$.env.subject-userid}/data_sets
                              headers:
                                x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                              method: post
                              body: <upload-post-data>
                            header:
                              title: Open a normal session
                          - type: callout
                            data:
                              body: >
                                The upload ID field should not be used in the
                                POST body when using these APIs. They are used
                                by an older upload service. In these APIs, the
                                upload ID is generated when starting an upload
                                session, and the ID should only be used as part
                                of the upload URI, not in the POST body.
                              type: warning
                          - type: text
                            data: >
                              As an example, creating a new dataset using the
                              `org.tidepool.deduplicator.device.deactivate.hash`
                              deduplicator might look like this:


                              ```

                              curl -X POST
                              https://int-api.tidepool.org/v1/users/<subject-userid>/data_sets
                              -H 'x-tidepool-session-token:
                              <your-session-token>' --data-binary '{ "client": {
                              "name": "<client-name>", "version":
                              "<client-version>" }, "dataSetType": "normal",
                              "deduplicator": { "name":
                              "org.tidepool.deduplicator.device.deactivate.hash"
                              }, "deviceManufacturers": [ "DeviceCorp" ],
                              "deviceModel": "Devicey McDeviceface",
                              "deviceSerialNumber": "B97B6D59", "deviceTags": [
                              "bgm", "cgm", "insulin-pump" ], "timeProcessing":
                              "none", "timezone": "Europe/London",
                              "clockDriftOffset": 0, "conversionOffset": 0,
                              "deviceId": "DevId0987654321", "deviceTime":
                              "2016-06-27T18:09:55", "time":
                              "2016-06-28T01:09:55.132Z", "timezoneOffset": -420
                              }'

                              ```


                              This will return an HTTP response with a JSON
                              body. You should temporarily store **the value of
                              the upload session ID** to upload data for this
                              session.

                              ```

                              {
                                "data": {
                                  "createdTime": "2017-02-06T02:37:46Z",
                                  "createdUserId": "<user-id>",
                                  "type": "upload",
                                  "uploadId": "<upload-session-id>",
                                            …
                                },
                                "meta": {
                                  "trace": {
                                    "request": "<trace-request-id> "
                                  }
                                }
                              }

                              ```


                              ---


                              ## Upload device data to the open session

                              Upload data to Platform in chunks of 1,000
                              records.


                              ```

                              curl
                              'https://int-api.tidepool.org/dataservices/v1/datasets/<upload-session-id>/data'
                              –H 'x-tidepool-session-token:
                              <your-session-token>' –H 'Content-Type:
                              application/json' --data-binary '[<array of
                              diabetes device data objects>]'

                              ```
                          - type: http
                            data:
                              method: post
                              url: >-
                                https://int-api.tidepool.org/dataservices/v1/datasets/{$$.env.upload-session-id}/data
                              headers:
                                x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                              body: >-
                                [<{$$.env.array} of diabetes device data
                                objects>]
                            header:
                              title: Upload device data to the open session
                          - type: text
                            data: >-
                              The body for this HTTP POST should be JSON, and
                              follow the format outlined in the [diabetes data
                              types](/device-data/data-types) documentation.


                              As an example, uploading a couple of continuous
                              blood glucose (CBG) records might look like this:

                              ```

                              curl
                              'https://int-api.tidepool.org/dataservices/v1/datasets/<upload-session-id>/data'
                              -H 'x-tidepool-session-token:
                              <your-session-token>' -H 'Content-Type:
                              application/json' --data-binary
                              '[{"time":"2017-02-05T13:26:51.000Z","timezoneOffset":660,"clockDriftOffset":0,"conversionOffset":0,"deviceTime":"2017-02-06T00:26:51","deviceId":"MMT-1711:12345678","type":"cbg","value":119,"units":"mg/dL","payload":{"interstitialSignal":24.98}},{"time":"2017-02-05T13:31:51.000Z","timezoneOffset":660,"clockDriftOffset":0,"conversionOffset":0,"deviceTime":"2017-02-06T00:31:51","deviceId":"MMT-1711:12345678","type":"cbg","value":120,"units":"mg/dL","payload":{"interstitialSignal":25.22}}]'

                              ```


                              ---


                              ## Close the upload session

                              ```

                              curl -X PUT
                              'https://int-api.tidepool.org/dataservices/v1/datasets/<upload-session-id>'
                              -H 'x-tidepool-session-token:
                              <your-session-token>' -H 'Content-Type:
                              application/json' --data-binary
                              '{"dataState":"closed"}'

                              ```
                          - type: http
                            data:
                              method: put
                              url: >-
                                https://int-api.tidepool.org/dataservices/v1/datasets/{$$.env.upload-session-id}
                              headers:
                                x-tidepool-session-token: '{$$.env.x-tidepool-session-token}'
                              body: '{"dataState":"closed"}'
                            header:
                              title: Close the upload session
                          - type: callout
                            data:
                              body: >-
                                If you do not close a normal upload session, the
                                data you uploaded will _not_ be returned from
                                Platform [when you fetch
                                data](/device-data/fetching-device-data). Make
                                sure to close your normal upload sessions when
                                they're finished.
                              type: error
                          - type: text
                            data: >-
                              ---


                              ### Keep reading


                              * [Diabetes data types](/device-data/data-types)

                              * [Diabetes device data model](/device-data)

                              * [Using a continuous upload
                              session](/quick-start/uploading-device-data/continuous)
        - title: Diabetes Device Data Model
          route:
            path: /device-data
          data:
            blocks:
              - type: text
                data: >
                  # Diabetes device data model


                  This is the data model for diabetes device types and other
                  related data that is read and stored in Platform. All events
                  read and stored by Platform use the JSON data interchange
                  format and have a type field identifying the subcategory of
                  event. 


                  In this data model, you can find definitions of the many
                  diabetes data types from basals to pump settings. There is
                  also documentation detailing common fields you may come
                  across, along with other useful information
                  ([annotations](/device-data/annotations), [linking
                  events](/device-data/linking-events), [out of range
                  values](/device-data/oor-values) and
                  [units](/device-data/units)).


                  If you are not looking for a specific topic or information,
                  [common fields](/device-data/common-fields) and [diabetes data
                  types](/device-data/data-types) are a good place to start. 
            children:
              - title: Annotations
                route:
                  path: /annotations
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Annotations 


                        ---


                        ### Table of contents


                        1. [Overview](#overview)

                        2. [Syntax and annotation
                        conventions](#syntax-and-annotation-conventions)

                        3. [Annotation duplications and
                        storage](#annotation-duplications-and-storage)

                        4. [Keep reading](#keep-reading)


                        ---


                        ## Overview


                        Tidepool strives for complete accuracy in the data
                        uploaded to Platform. In some cases, where the data
                        coming from diabetes devices falls just shy of the data
                        model requirements, it is possible to implement logic
                        that gives us high — but not 100% — confidence in the
                        result. In such cases, Tidepool has chosen to implement
                        this logic but also to annotate the resulting data to
                        expose the small amount of uncertainty remaining. We
                        have done this so we can provide the same user
                        experience to those using various diabetes devices in
                        their treatment. 


                        ---


                        ## Syntax and annotation conventions

                        In the Tidepool data model, annotations is an optional
                        property that may appear on any type in the data model,
                        with the exception of
                        [upload](/device-data/data-types/pump-settings/upload)
                        (which is more of a metadata container). Annotations
                        itself is an array of objects, where each object
                        represents an individual annotation.


                        An annotation object must have a code property, and the
                        typical construction of this code property is:
                        `[manufacturer]/(datatype)/(description)`. The
                        manufacturer prefix is optional and only present if the
                        reason for annotation is manufacturer-specific. The data
                        type (e.g. basal or bolus) provides another level of
                        annotation namespacing. A descriptive and
                        hyphen-delimited string should come last in the
                        annotation code.


                        ### Examples

                        Manufacturer/device-specific:


                        * `animas/bolus/extended-equal-split`

                        * `insulet/basal/fabricated-from-schedule`


                        Non-specific:


                        * `bg/out-of-range`


                        ---


                        ## Annotation duplications and storage 

                        In addition to the code, an annotation object may also
                        contain other properties. For an example of this, see
                        the documentation on [out of range
                        values](/device-data/oor-values).


                        Tidepoool wants to ensure there are no duplicate
                        annotations on a single datum, so utility functions are
                        provided in the uploader repository's
                        `lib/eventAnnotations.js`: 


                        * "annotate event" which checks for duplicates before
                        adding an annotation

                        * "is annotated" for checking the existence of a
                        particular annotation


                        While most annotations are added at the time of
                        ingesting data into Platform, a few annotations are
                        added during the data preprocessing in the client prior
                        to data display. These annotations relate to event
                        interplay across device uploads and are therefore
                        unidentifiable during the device data ingestion process.
                        An example of an annotation of the type is
                        `basal/intersects-incomplete-suspend`, which we surface
                        in Tidepool Web with a hover message of: 


                        > "Within this basal segment, we are omitting a suspend
                        event that didn't end. This may have resulted from
                        changing the date & time settings on the device or
                        switching to a new device. As a result, this basal
                        segment may be inaccurate."

                        > 


                        The best resource for viewing all current annotations in
                        the Tidepool data model is the [tideline
                        code](https://github.com/tidepool-org/tideline/blob/master/js/plot/util/annotations/annotationdefinitions.js)
                        where the user-facing messages are defined for each
                        annotation code.


                        ---


                        ### Keep Reading


                        * [Diabetes data types](/device-data/data-types)

                        * [Out of range values](/device-data/oor-values)

                        * [Pump settings](/device-data/data-types/pump-settings)
              - title: Common Fields
                route:
                  path: /common-fields
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Common fields


                        ---


                        ### Table of contents


                        1. [Quick summary](#quick-summary)

                        2. [Clock drift
                        offset](#clock-drift-offset-clockdriftoffset)

                        3. [Conversion
                        offset](#conversion-offset-conversionoffet)

                        4. [Created time](#created-time-createdtime)

                        5. [Device ID](#device-id-deviceid)

                        6. [Device time](#device-time-devicetime)

                        7. [GUID](#guid-guid)

                        8. [ID](#id-id)

                        9. [Time](#time-time)

                        10. [Timezone offset](#timezone-offset-timezoneoffset)

                        11. [Upload ID](#upload-id-uploadid)

                        12. [Example (all possible
                        fields)](#example-all-possible-fields)


                        ---


                        ## Quick summary
                    - type: jsonSchema
                      data:
                        $ref: './data.oas2.yml#/definitions/Base'
                      header:
                        title: Common fields
                        subtitle: Quick summary
                    - type: text
                      data: >-
                        ---


                        ## Clock drift offset (`clockDriftOffset`)


                        This field is Platform's best effort to convert the
                        device's local [display time](#device-time-devicetime)
                        to UTC. This optional field records the offset from UTC
                        (in milliseconds) resulting from small adjustments a
                        user may make to a device's display time due to "clock
                        drift." See the technical documentation describing
                        ["Bootstrapping to
                        UTC"](/datetime/btutc#clock-drift-offset-clockdriftoffset)
                        for more information. 


                        ---


                        ## Conversion offset (`conversionOffset`)


                        This field is Platform's best effort to convert the
                        device's local [display time](#device-time-devicetime)
                        to UTC. This field records the offset from UTC resulting
                        from *very large* adjustments a user may make due to
                        realizing the device was set to the wrong day, month, or
                        year. See the technical documentation describing
                        ["Bootstrapping to
                        UTC"](/datetime/btutc#conversion-offset-conversionoffset)
                        for more information. 


                        ---


                        ## Created time (`createdTime`)


                        Created time is the machine-time when the event was
                        first ingested into Platform. This is represented as an
                        [ISO 8601-formatted](/datetime/glossary#iso-8601) UTC
                        timestamp with a final Z for "Zulu" time. 


                        Example:


                        * 2015-11-09T03:58:44.584Z. 


                        ---


                        ## Device ID (`deviceId`)
                         
                        A string encoding the device that generated the datum.
                        This should be globally unique to this device and
                        repeatable with each upload. A device make and model
                        with a shortened serial number is a good value to
                        include here.


                        Examples:


                        * *InsOmn-240243671* (Insulet OmniPod with serial number
                        240243671)

                        * *DexG4RecwitShaSM62228608* (Dexcom G4 receiver with
                        Share, serial number SM62228608)


                        ---


                        ## Device time (`deviceTime`)


                        No curently available diabetes device (that Tidepool
                        knows of) stores data in UTC or UTC-anchored time via a
                        timezone offset. This means all diabetes devices
                        currently store the device's display time *at the time
                        the event occurred*. Platform makes a best effort to
                        [convert this device time to UTC](/datetime/btutc), but
                        the raw device time is also stored for data-auditing
                        purposes. It is stored in the [ISO 8601
                        format](/datetime/glossary#iso-8601), but without any
                        timezone offset information. 


                        Example:

                        * 2015-11-08T17:06:53.


                        ---


                        ## GUID (`guid`)


                        An [RFC 4122](https://www.ietf.org/rfc/rfc4122.txt)
                        version 4 UUID (universally unique identifier),
                        generated using the
                        [node-uuid](https://github.com/broofa/node-uuid) library
                        in [Tidepool
                        Uploader](https://github.com/tidepool-org/chrome-uploader)
                        or, if the data is being ingested through Platform,
                        added upon ingestion by the service itself. 


                        See
                        [here](http://github.com/tidepool-org/chrome-uploader/blob/master/lib/core/api.js)
                        for Tidepool Uploader implementation and `app/uuid.go`
                        for Platform ingestion implementation.


                        ---


                        ## ID (`id`)


                        The IDs generated for each event by Platform are simply
                        [RFC 4122](https://www.ietf.org/rfc/rfc4122.txt) version
                        4 UUIDs with the - characters deleted. This provides a
                        backwards compatibility with the format of the earlier
                        jellyfish-generated IDs, which were alphanumeric.
                    - type: callout
                      data:
                        body: >-
                          IDs are not deterministically generated from the
                          content of events and are therefore not useful for
                          deduplication.
                        type: info
                    - type: text
                      data: >-
                        ---


                        ## Time (`time`)


                        An [ISO 8601-formatted](/datetime/glossary#iso-8601)
                        timestamp including either a timezone offset from UTC or
                        converted to UTC and formatted with a final Z for "Zulu"
                        time.


                        This field is Platform's best effort to convert the
                        device's local [display time](#device-time-devicetime)
                        to UTC. See ["Bootstrapping to UTC"](/datetime/btutc)
                        for more information.


                        Examples:


                        * 2015-11-08T17:06:53-08:00 *(timezone offset from UTC)*

                        * 2015-11-09T01:06:53.555Z *("Zulu" time formatting)*


                        ---


                        ## Timezone offset (`timezoneOffset`)


                        This field is Platform's best effort to convert the
                        device's local [display time](#device-time-devicetime)
                        to UTC. Timezone offset encodes the offest (in minutes
                        from UTC) to convert the UTC timestamp back to local
                        display time. See ["Bootstrapping to
                        UTC"](/datetime/btutc) for more information.


                        Examples:


                        * 0 (timezone offset for UTC)

                        * -480 (timezone offset for Pacific Standard Time in the
                        U.S.)

                        * 60 (timezone offset for British Summer Time)


                        ---


                        ## Upload ID (`uploadId`)


                        An upload identifier. This field should be the upload ID
                        of the corresponding upload record. Currently, upload
                        IDs are generated in [Tidepool
                        Uploader](https://github.com/tidepool-org/chrome-uploader/blob/master/lib/core/api.js)
                        as a hash of various pieces of upload session metadata.
                    - type: callout
                      data:
                        body: >
                          Upload ID does *not* figure in the calculations of an
                          event record's ID. This ID is used to prevent storage
                          of multiple copies of the same event. This means that
                          multiple attempts to upload the same event record will
                          nevertheless result in the same ID.
                        type: warning
                    - type: text
                      data: |-
                        ---

                        ## Example (all possible fields)
                        ```
                        {
                            "_active": true,
                            "_groupId": "abcdef",
                            "_schemaVersion": 0,
                            "_version": 0,
                            "clockDriftOffset": 0,
                            "conversionOffset": 0,
                            "createdTime": "2018-05-14T08:17:12.734Z",
                            "deviceId": "DevId0987654321",
                            "deviceTime": "2018-05-14T18:17:07",
                            "guid": "33b8f139-50e4-49d6-b9eb-44d70cc05abc",
                            "id": "47a2c4c1435a41bc83aba48797ed5cb3",
                            "time": "2018-05-14T08:17:07.734Z",
                            "timezoneOffset": 600,
                            "uploadId": "SampleUploadId"
                        }
                        ```
              - title: Diabetes Data Types
                route:
                  path: /data-types
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Diabetes data types


                        This documents the diabetes device data types that
                        Platform reads and stores. All events read and stored by
                        Platform use the JSON data interchange format and have a
                        type field identifying the subcategory of event. The
                        semantics of the other fields in each subcategory are
                        generally defined individually per subcategory, but
                        there are some [common
                        fields](/device-data/common-fields).


                        ## Diabetes data types:


                        * [Basal insulin](/device-data/data-types/basal)

                        * [Blood
                        ketones](/device-data/data-types/blood-ketones) 

                        * [Bolus insulin](/device-data/data-types/bolus) 

                        * [Continuous blood glucose
                        (CBG)](/device-data/data-types/cbg)  

                        * [CGM settings](/device-data/data-types/cgm-settings)

                        * [Device event
                        (miscellaneous)](/device-data/data-types/device-event)

                        * [Pump settings](/device-data/data-types/pump-settings)

                        * [Self-monitored blood glucose
                        (SMBG)](/device-data/data-types/pump-settings/smbg)

                        * [Upload
                        metadata](/device-data/data-ftypes/pump-settings/upload) 

                        * [Bolus calculator
                        (wizard)](/device-data/data-types/pump-settings/calculator) 
                    - type: callout
                      data:
                        body: >-
                          Go to the [diabetes device data model](/device-data)
                          for additional information not listed here. 
                  children:
                    - title: Basal
                      route:
                        path: /basal
                      data:
                        blocks:
                          - type: text
                            data: >-
                              # Basal insulin (`basal`)


                              ---


                              ### Table of contents


                              1. [Overview](#overview)

                              2. [Duration](#duration-duration)

                              3. [Expected
                              duration](#expected-duration-expectedduration)

                              4. [Rate](#rate-rate)

                              5. [Schedule name](#schedule-name-schedulename)

                              6. [Keep reading](#keep-reading)


                              ---


                              ## Overview


                              This is the Tidepool data type for background
                              insulin dosing — the “constant drip” of insulin
                              programmable in all insulin pumps. Different
                              insulin pump manufacturers use different
                              terminology for this insulin dosing, so we have
                              standardized calling one set of rates covering a
                              24-hour period a basal “schedule.”


                              The data model for basal schedules is part of the
                              Tidepool [pump settings
                              type](/device-data/data-types/pump-settings),
                              however, basal data types represent actual
                              intervals of basal insulin delivery and may or may
                              not match the programmed basal schedule. 
                          - type: callout
                            data:
                              type: info
                              body: >-
                                To calculate the total insulin delivery
                                resulting from a basal event, convert the
                                duration from milliseconds to hours and multiply
                                the result by the rate.
                          - type: text
                            data: >-
                              This page documents the fields shared by various
                              basal delivery types. The four delivery types that
                              fall under the larger basal type are:


                              *
                              [Scheduled](/device-data/data-types/basal/scheduled)

                              *
                              [Automated](/device-data/data-types/basal/automated)

                              * [Temporary](/device-data/data-types/basal/temp)

                              * [Suspend](/device-data/data-types/basal/suspend)


                              ---


                              ## Duration (`duration`)


                              In Platform, the duration field is required on all
                              basals. We define duration as the period of time
                              that a basal runs or, in the case of suspend
                              basals, the period of time a suspension of insulin
                              occurs. 


                              Depending on how some pumps' insulin pulses are
                              scheduled, the actual duration of the basal may 

                              differ slightly from the scheduled duration. This
                              explains why some pumps' duration results in odd
                              numbers of milliseconds (e.g. 3600001 for a basal
                              event lasting an hour). 


                              Platform expects the duration value of basals to
                              be >= 0 and <= 604800000  milliseconds (seven
                              days). 


                              ---


                              ## Expected duration (`expectedDuration`)


                              Many insulin pumps provide information on the
                              expected duration of basals in addition to the
                              *actual* duration of basals. (These values may
                              differ in the case of a basal being suspended or
                              canceled.) Where this is true, Platform will
                              provide the same information. If you do not know
                              what the expected duration is, do not include this
                              information as it is an optional field.


                              ---


                              ## Rate (`rate`)


                              Different insulin pump manufacturers offer the
                              ability to program basal rates with different
                              levels of precision in terms of significant digits
                              on the rate. 


                              Tidepool endeavors to represent each rate
                              accurately, so occasionally when values are stored
                              to a falsely large number, Platform will round the
                              raw rate value to match the significant digits of
                              precision advertised by the manufacturer. 


                              Many insulin pump manufacturers do not allow a
                              basal rate higher than 10.0 or 15.0 units per
                              hour; Platform will reject any value higher than
                              100.0 units per hour.


                              ---


                              ## Schedule name (`scheduleName`)


                              Tidepool would love to surface the basal schedule
                              names for every pump manufacturer. Unfortunately,
                              most manufacturers do not provide this information
                              or record pump setting changes. In some cases, we
                              can find this information ourselves by looking up
                              the active pump settings at the time of a
                              particular basal event.


                              Schedule name is an optional field and should only
                              be added to basal data when directly available
                              from an insulin pump's raw data, or if it can be
                              inferred with high confidence via lookup against a
                              complete pump settings history.


                              ---


                              ### Keep reading:


                              * [Annotations](/device-data/annotations)

                              * [Automated
                              basals](/device-data/data-types/basal/automated)

                              * [Common fields](/device-data/common-fields)

                              * [Pump
                              settings](/device-data/data-types/pump-settings)

                              * [Scheduled
                              basals](/device-data/data-types/basal/scheduled)

                              * [Suppressed
                              basals](/device-data/data-types/basal/suppressed)

                              * [Suspend
                              basals](/device-data/data-types/basal/suspend)

                              * [Temporary
                              basals](/device/data/data-types/basal/temp)

                              * [Units](/device-data/units)
                        children:
                          - title: Automated Basals
                            route:
                              path: /automated
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    # Automated basals (`automated`)


                                    ---


                                    ### Table of contents


                                    1. [Quick summary](#quick-summary)

                                    2. [Delivery
                                    type](#delivery-type-deliverytype)

                                    3. [Example (client)](#example-client)

                                    4. [Example (ingestion)](#example-ingestion)

                                    5. [Example (storage)](#example-storage)

                                    6. [Keep reading](#keep-reading)


                                    ---


                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/BasalAutomated
                                  header:
                                    title: Automated basals
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Delivery type (`deliveryType`)


                                    This is the sub-type of basal event
                                    representing intervals of basal insulin
                                    delivery triggered by the pump itself
                                    (rather than manual user entry) according to
                                    a closed loop algorithm.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "automated",
                                        "duration": 55800000,
                                        "rate": 1.825,
                                        "scheduleName": "Stress",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "de52b7f9-146f-48f1-a78b-069df20b700a",
                                        "id": "07d77d96e6854cb982027ed53db9594f",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "automated",
                                        "duration": 84600000,
                                        "rate": 0.525,
                                        "scheduleName": "Very Active",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "automated",
                                        "duration": 46800000,
                                        "rate": 1.175,
                                        "scheduleName": "Weekday",
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:00:05.000Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "b0b9c24b-00b1-4f0a-863a-5b4f09aa6720",
                                        "id": "6f513a7bb30445a69a8c30d134f2f0ce",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Basal](/device-data/data-types/automated)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Pump
                                    settings](/device-data/pump-settings)

                                    * [Scheduled
                                    basals](/device-data/data-types/basal/scheduled)

                                    * [Suppressed
                                    basals](/device-data/data-types/basal/suppressed)

                                    * [Suspend
                                    basals](/device-data/data-types/basal/suspend)

                                    * [Temporary
                                    basals](/device-data/data-types/basal/temp)

                                    * [Units](/device-data/units)
                          - title: Scheduled Basals
                            route:
                              path: /scheduled
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    # Scheduled basals (`scheduled`)


                                    ---


                                    ### Table of contents


                                    1. [Quick summary](#quick-summary)

                                    2. [Delivery
                                    type](#delivery-type-deliverytype)

                                    3. [Example (client)](#example-client)

                                    4. [Example (ingestion)](#example-ingestion)

                                    5. [Example (storage)](#example-storage)

                                    6. [Keep reading](#keep-reading)


                                    ---


                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/BasalScheduled
                                  header:
                                    title: Scheduled basals
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Delivery type (`deliveryType`)

                                    This is the sub-type of basal event that
                                    represents intervals of basal insulin
                                    delivery triggered by the pump itself
                                    according to the active basal schedule
                                    programmed by the user (or clinician).


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "duration": 84600000,
                                        "rate": 1.45,
                                        "scheduleName": "Very Active",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "9d161801-2607-4cb6-b4f8-457159c7786c",
                                        "id": "30f76219248d474fa7025b12f0e4b136",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "duration": 82800000,
                                        "rate": 0.025,
                                        "scheduleName": "Weekend",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "duration": 79200000,
                                        "rate": 1.175,
                                        "scheduleName": "Vacation",
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:00:05.000Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "05d3bdbd-3ad3-4762-9a7b-2e8e27a601c3",
                                        "id": "33f00679ddf440ec95055114162d4821",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Automated
                                    basals](/device-data/data-types/basal/automated)

                                    * [Basal](/device-data/data-types/automated)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Pump
                                    settings](/device-data/pump-settings)

                                    * [Suppressed
                                    basals](/device-data/data-types/basal/suppressed)

                                    * [Suspend
                                    basals](/device-data/data-types/basal/suspend)

                                    * [Temporary
                                    basals](/device-data/data-types/basal/temp)

                                    * [Units](/device-data/units)
                                  header:
                                    anchor: '# Scheduled Basals'
                          - title: Suppressed Basals
                            route:
                              path: /suppressed
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    # Suppressed basals (`suppressed`)


                                    ---


                                    ### Table of contents


                                    1. [Quick summary:
                                    scheduled](#quick-summary-scheduled)

                                    2. [Quick summary:
                                    automated](#quick-summary-automated)

                                    3. [Quick summary:
                                    temporary](#quick-summary-temporary)

                                    4. [Overview](#overview)

                                    5. [Supprressed across schedule
                                    boundaries](#suppressed-across-schedule-boundaries)

                                    6. [Suppressed: when a temp or suspend is
                                    edited](#suppressed-when-a-temp-or-suspend-is-edited)

                                    7. [Nested suppressed in suspend
                                    basals](#nested-suppressed-in-suspend-basals)

                                    8. [Supressed suspend
                                    basals](#suppressed-suspend-basals)

                                    9. [Keep reading](#keep-reading)


                                    ---


                                    ## Quick summary: scheduled
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/BasalSuppressedScheduled
                                  header:
                                    title: 'Suppressed Basal: scheduled'
                                    subtitle: Quick summary
                                - type: text
                                  data: |-
                                    ---

                                    ## Quick summary: automated
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/BasalSuppressedAutomated
                                  header:
                                    title: 'Suppressed basal: automated'
                                    subtitle: Quick summary
                                - type: text
                                  data: |-
                                    ---

                                    ## Quick summary: temporary 
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/BasalSuppressedTemporary
                                  header:
                                    title: 'Supressed basal: temporary'
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Overview 


                                    A suppressed basal is a way to essentially
                                    replace one basal with another basal. For
                                    example, if a PwD's blood glucose is
                                    falling, they may program a temp basal to
                                    try and prevent hypoglycemia. By programming
                                    a temp basal, they are suppressing a
                                    scheduled basal, which was previously in
                                    effect. A suppressed can apply to all basal
                                    types except a suspend — [see
                                    here](#suppressed-suspend-basals).  


                                    A suppressed may contain the following
                                    properties:


                                    * Type

                                    * Delivery type

                                    * Rate

                                    * Schedule name (optional)


                                    Some insulin pump data protocols let us
                                    track various aspects of the basal that
                                    *would have occurred* if uninterrupted by
                                    the current active temp or suspend basal.
                                    Where available, we provide this information
                                    as an embedded object in the suppressed
                                    field on a temp or suspend basal interval. 


                                    If the current active basal is a suspend and
                                    the suppressed is a temp, then the following
                                    temp fields may also be present on the
                                    suppressed object:


                                    *
                                    [Percent](/device-data/data-types/basal/temp#percent-percent)

                                    * [Nested suppressed
                                    object](#nested-suppressed-in-suspend-basals)
                                - type: callout
                                  data:
                                    body: >
                                      We do *not* include any timestamp or
                                      duration information in the suppressed —
                                      these values are always equal to those of
                                      the active basal intervals, so it is
                                      unnecessary to specify them.
                                    type: warning
                                - type: text
                                  data: >-
                                    ---


                                    ## Suppressed across schedule boundaries

                                    When a temp or suspend basal crosses a basal
                                    schedule boundary, the original programmed
                                    basal rate *changes* in accordance with the
                                    schedule change. This necessitates splitting
                                    the temp or suspend into multiple segments:
                                    each type of basal; the sum of all segments'
                                    durations; and the total duration of the
                                    temp or suspend (as reported by the insulin
                                    pump). 


                                    For example, let us assume this basal
                                    schedule is active:

                                    ```

                                    [{
                                      "start": 0, // midnight
                                      "rate": 0.25
                                    },

                                    {
                                      "start": 3600000, // 1 a.m.
                                      "rate": 0.2
                                    },

                                    {
                                      "start": 10800000, // 3 a.m.
                                      "rate": 0.25
                                    },

                                    {
                                      "start": 21600000, // 6 a.m.
                                      "rate": 0.6
                                    },

                                    {
                                      "start": 43200000, // 12 p.m.
                                      "rate": 0.35
                                    }]

                                    ```

                                    A scheduled basal event on a particular day
                                    at 12:00 am — according to this schedule — 
                                    would look like:


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "scheduled",
                                      "duration": 3600000,
                                      "rate": 0.25,
                                      "scheduleName": "Standard",
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-07T00:00:00",
                                      "time": "2016-10-07T07:00:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```

                                    Now, let's say a user programs a temp basal
                                    at 12:25 am to run for three hours, until
                                    3:25 am. The scheduled basal will look
                                    almost the same, except the duration will be
                                    different since the scheduled segment will
                                    have only run for 25 minutes from 12:00 am
                                    to 12:25 am:


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "scheduled",
                                      "duration": 1500000, // 25 minutes from 12:00 a.m. to 12:25 a.m.
                                      "rate": 0.25,
                                      "scheduleName": "Standard",
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-07T00:00:00",
                                      "time": "2016-10-07T07:00:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```

                                    The three-hour temp basal will cross
                                    schedule boundaries at 1:00 am and 3:00 am.
                                    It will then be divided into three segment
                                    intervals, with the suppressed field
                                    matching the segment of the schedule that
                                    *would have occurred* if the temp had not
                                    been programmed.


                                    First temp interval:


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "temp",
                                      "duration": 2100000, // 35 minutes from 12:25 a.m. to 1:00 a.m.
                                      "percent": 0.5,
                                      "rate": 0.125, // == percent * suppressed.rate
                                      "suppressed": {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "rate": "0.25",
                                        "scheduleName": "Standard"
                                      },
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-07T00:25:00",
                                      "time": "2016-10-07T07:25:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```

                                    Second temp interval:


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "temp",
                                      "duration": 7200000, // 2 hours from 1:00 a.m. to 3:00 a.m.
                                      "percent": 0.5,
                                      "rate": 0.1, // == percent * suppressed.rate
                                      "suppressed": {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "rate": "0.2",
                                        "scheduleName": "Standard"
                                      },
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-07T01:00:00",
                                      "time": "2016-10-07T08:00:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```

                                    Third temp interval:


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "temp",
                                      "duration": 1500000, // 25 minutes from 3:00 a.m. to 3:25 a.m.
                                      "percent": 0.5,
                                      "rate": 0.125, // == percent * suppressed.rate
                                      "suppressed": {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "rate": "0.25",
                                        "scheduleName": "Standard"
                                      },
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-07T03:00:00",
                                      "time": "2016-10-07T10:00:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```

                                    The durations of all three temp intervals
                                    here adds up to the programmed temp
                                    duration: 2100000 + 7200000 + 1500000 =
                                    10800000 (three hours).


                                    For a suspend that crosses scheduled
                                    boundaries, the examples would be very
                                    similar, except with no rate on the
                                    top-level (active) suspend basal.
                                - type: callout
                                  data:
                                    body: >
                                      A known issue with this data model is that
                                      when a temp or suspend basal crosses *more
                                      than one* schedule boundary, but then is
                                      cancelled within one of the "middle" (not
                                      edge) segments, we have no good way to
                                      represent the original expected duration
                                      of the *entire* programmed temp or
                                      suspend. The expected duration on a middle
                                      segment of a three-or-more segment temp or
                                      suspend basal should be the expected
                                      duration of *that segment* from the basal
                                      schedule.
                                    type: warning
                                - type: text
                                  data: >-
                                    ---


                                    ## Suppressed: when a temp or suspend is
                                    edited

                                    To date, we know of one insulin pump
                                    manufacturer (Medtronic) that allows for
                                    *editing* a temp basal while it is in
                                    effect. In principle, the same could apply
                                    to a suspend programmed with a duration (as
                                    required for OmniPod). For the purposes of
                                    our temp basal model, we treat the editing
                                    of a temp basal as a cancellation, followed
                                    by the immediate scheduling of a second
                                    temp. We *do not* consider the first temp
                                    basal to be suppressed by the second edited
                                    temp. For example, consider a user running a
                                    "flat rate" basal schedule:


                                    ```

                                    [{
                                      "start": 0,
                                      "rate": 1.95
                                    }]

                                    ```

                                    At 8:00 am, this user schedules an 85% temp
                                    basal to run for four hours, but edits it
                                    after three hours and 36 minutes to change
                                    the percentage to 90%. The first temp basal
                                    event will look like this:


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "temp",
                                      "duration": 12960000,
                                      "expectedDuration": 14400000,
                                      "percent": 0.85,
                                      "rate": 1.6575,
                                      "suppressed": {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "scheduleName": "Weekend",
                                        "rate": 1.95
                                      },
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-07T08:00:00",
                                      "guid": "634b43c7-9d0d-47ed-afec-3aac2db99a6a",
                                      "id": "9759417fa35c45839d0400240a13523c",
                                      "time": "2016-10-07T15:00:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```

                                    The second follows immediately,  but carries
                                    no indication that it is an "edited" temp
                                    (except perhaps additional information in
                                    the payload); rather, it is
                                    indistinguishable from a "fresh" temp basal
                                    scheduled for the given time. Note that its
                                    suppressed is the scheduled flat-rate basal,
                                    *not* the prior temp basal.


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "temp",
                                      "duration": 1440000,
                                      "percent": 0.90,
                                      "rate": 1.755,
                                      "suppressed": {
                                        "type": "basal",
                                        "deliveryType": "scheduled",
                                        "scheduleName": "Weekend",
                                        "rate": 1.95
                                      },
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-07T11:36:00",
                                      "guid": "634b43c7-9d0d-47ed-afec-3aac2db99a6a",
                                      "id": "9759417fa35c45839d0400240a13523c",
                                      "time": "2016-10-07T18:36:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Nested suppressed in suspend basals

                                    Because a suspend can occur when a temp is
                                    in effect, there is the possibility of
                                    **nested** suppressed in a suspend basal.
                                    The suppressed on the suspend basal contains
                                    information about the temp that was in
                                    effect *before* the suspend was programmed
                                    or triggered. 


                                    In addition to the suppressed  (about the
                                    temp) on the active suspend, the suppressed
                                    temp can *also* have a suppressed containing
                                    information about the scheduled basal that
                                    *would have occurred* had the temp basal not
                                    been programmed. For example:


                                    ```

                                    {
                                      "type": "basal",
                                      "deliveryType": "suspend",
                                      "duration": 41400000,
                                      "suppressed": {
                                        "type": "basal",
                                        "deliveryType": "temp",
                                        "percent": 0.5,
                                        "rate": 0.6,
                                        "suppressed": {
                                          "type": "basal",
                                          "deliveryType": "scheduled",
                                          "scheduleName": "Very Active",
                                          "rate": 1.2
                                        }
                                      },
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2016-10-09T23:00:00",
                                      "guid": "58812f26-e734-4b9a-9162-02bfee2a1dce",
                                      "id": "a428262a0f7245a792db5712dc11d6eb",
                                      "time": "2016-10-10T06:00:00.000Z",
                                      "timezoneOffset": -420,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    Just as with a single level of suppressed,
                                    nested suppressed should be adjusted
                                    whenever the basal crosses a schedule
                                    boundary.


                                    ---


                                    ## Supressed suspend basals


                                    A suspend basal can embed a scheduled,
                                    automatic or temporary suppressed basal,
                                    *even if that basal already contains a
                                    suppressed basal event*. For example: 


                                    * A user's blood glucose is falling and they
                                    program a temp basal (which embeds a
                                    suppressed scheduled basal) in an attempt to
                                    prevent hypoglycemia

                                    * However, the user's blood glucose
                                    continues to fall and the insulin pump
                                    suspends insulin delivery (due to the
                                    automatic low glucose suspend feauture)

                                    * This creates a suspend basal that embeds a
                                    supressed temp basal, which is still
                                    embedding a suppressed scheduled basal


                                    ---


                                    ### Keep reading


                                    * [Automated
                                    basals](/device-data/data-types/basal/automated)

                                    * [Basal](/device-data/data-types/automated)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Scheduled
                                    basals](/device-data/data-types/basal/scheduled)

                                    * [Suspend
                                    basals](/device-data/data-types/basal/suspend)

                                    * [Temporary
                                    basals](/device-data/data-types/basal/temp)

                                    * [Units](/device-data/units)
                          - title: Suspend Basals
                            route:
                              path: /suspend
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    # Suspend basals (`suspend`)


                                    ---


                                    ### Table of contents


                                    1. [Quick summary](#quick-summary)

                                    2. [Delivery
                                    type](#delivery-type-deliverytype)

                                    3. [Example (client)](#example-client)

                                    4. [Example (ingestion)](#example-ingestion)

                                    5. [Example (storage)](#example-storage)

                                    6. [Keep reading](#keep-reading)


                                    ---


                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: './data.oas2.yml#/definitions/BasalSuspend'
                                  header:
                                    title: Suspend basals
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Delivery type (`deliveryType`)


                                    This is the sub-type of basal event
                                    representing the total suspension of insulin
                                    delivery on a pump within the stream of
                                    basal events — which should be without gaps
                                    or overlaps. The user's inputs to suspend
                                    (and later resume) insulin delivery are part
                                    of Tidepool's [device
                                    event](/device-data/data-types/device-event)
                                    data type. We represent suspend intervals as
                                    a suspend basal to maintain a continuous
                                    stream of basal data, making the calculation
                                    of statistics (e.g. total basal dose per
                                    day) easier. 


                                    No rate field appears on suspend basal
                                    events. The rate is always zero, so this is
                                    redundant information.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "suspend",
                                        "duration": 10800000,
                                        "expectedDuration": 12960000,
                                        "suppressed": {
                                            "type": "basal",
                                            "deliveryType": "scheduled",
                                            "scheduleName": "Stress",
                                            "rate": 1.05
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "f9623fae-217c-47e1-a49c-85b7a9bca8ac",
                                        "id": "ba1027905672484babe56579f9291204",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "suspend",
                                        "duration": 86400000,
                                        "expectedDuration": 103680000,
                                        "suppressed": {
                                            "type": "basal",
                                            "deliveryType": "scheduled",
                                            "scheduleName": "Very Active",
                                            "rate": 1.55
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "suspend",
                                        "duration": 34200000,
                                        "expectedDuration": 41040000,
                                        "suppressed": {
                                            "type": "basal",
                                            "deliveryType": "scheduled",
                                            "scheduleName": "Weekday",
                                            "rate": 1.525
                                        },
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:00:05.000Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "f96df9f8-40f4-4f05-a4d4-c27af663ec2e",
                                        "id": "76b597d3d2354902b6dcd924d58fbd37",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Automated
                                    basals](/device-data/data-types/basal/automated)

                                    * [Basal](/device-data/data-types/automated)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Scheduled
                                    basals](/device-data/data-types/basal/scheduled)

                                    * [Suppressed
                                    basals](/device-data/data-types/basal/suppressed)

                                    * [Temporary
                                    basals](/device-data/data-types/basal/temp)

                                    * [Units](/device-data/units)
                          - title: Temporary Basals
                            route:
                              path: /temp
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    # Temporary basals (`temp`)


                                    ---


                                    ### Table of contents


                                    1. [Quick summary](#quick-summary)

                                    2. [Delivery
                                    type](#delivery-type-deliverytype)

                                    3. [Percent](#percent-percent)

                                    4. [Example (client)](#example-client)

                                    5. [Example (ingestion)](#example-ingestion)

                                    6. [Example (storage)](#example-storage)

                                    7. [Keep reading](#keep-reading)


                                    ---


                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/BasalTemporary
                                  header:
                                    title: Temporary basals
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Delivery type (`deliveryType`)


                                    This is the sub-type of basal event that
                                    represents temporary intervals of basal
                                    insulin delivery requested by the user.
                                    Insulin pumps allow a temporary basal
                                    insulin rate for a duration of up to 24
                                    hours. Depending on the pump, the user will
                                    be able to program a temp basal rate by
                                    percentage, manual specification or both. 


                                    ---


                                    ## Percent (`percent`)

                                    Different insulin pump manufacturers have
                                    different interfaces for setting temporary
                                    basal rates by percentage. Some express this
                                    as a positive or negative percentage from
                                    the currently active scheduled basal rate.
                                    Other pumps express this change as an
                                    absolute percentage of the current active
                                    rate. 


                                    Examples:


                                    1. The current active rate is 0.5 units per
                                    hour, so the user programs a -50% temp basal
                                    to implement a rate of 0.25

                                    2. The user inputs 50% to yield  0.25 units
                                    per hour and 150% to yield a 0.75 temporary
                                    rate


                                    Tidepool's data model has standardized on a
                                    floating point representation of the second
                                    strategy. The value 0.0 represents a temp
                                    basal at 0% of the current active rate, 0.5
                                    at 50%, 1.0 at 100%, 1.5 at 150%, and so on.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "temp",
                                        "duration": 28800000,
                                        "expectedDuration": 34560000,
                                        "percent": 0.75,
                                        "rate": 0.1875,
                                        "suppressed": {
                                            "type": "basal",
                                            "deliveryType": "scheduled",
                                            "scheduleName": "Weekend",
                                            "rate": 0.25
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "a58d9efb-3f0d-41d3-a711-edf890a3062e",
                                        "id": "e52976685fc94f7a9d0272fdd5c63fa0",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "temp",
                                        "duration": 50400000,
                                        "expectedDuration": 60480000,
                                        "percent": 0.65,
                                        "rate": 1.2025,
                                        "suppressed": {
                                            "type": "basal",
                                            "deliveryType": "scheduled",
                                            "scheduleName": "Stress",
                                            "rate": 1.85
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "basal",
                                        "deliveryType": "temp",
                                        "duration": 82800000,
                                        "expectedDuration": 99360000,
                                        "percent": 0.75,
                                        "rate": 0.075,
                                        "suppressed": {
                                            "type": "basal",
                                            "deliveryType": "scheduled",
                                            "scheduleName": "Very Active",
                                            "rate": 0.1
                                        },
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:00:05.000Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:00:00",
                                        "guid": "7a504ee3-17a5-4ec8-b157-c1a985731192",
                                        "id": "e3b4654d90664fca9a30c20ff19c93fd",
                                        "time": "2018-05-14T08:00:00.000Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Automated
                                    basals](/device-data/data-types/basal/automated)

                                    * [Basal](/device-data/data-types/automated)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Scheduled
                                    basals](/device-data/data-types/basal/scheduled)

                                    * [Suppressed
                                    basals](/device-data/data-types/basal/suppressed)

                                    * [Suspend
                                    basals](/device-data/data-types/basal/suspend)

                                    * [Units](/device-data/units)
                    - title: Blood Ketones
                      route:
                        path: /blood-ketones
                      data:
                        blocks:
                          - type: text
                            data: |-
                              # Blood ketones (`bloodKetone`)

                              ---

                              ### Table of contents

                              1. [Quick summary](#quick-summary)
                              2. [Type](#type)
                              3. [Value](#value)
                              4. [Example (client)](#example-client)
                              5. [Example (ingestion)](#example-ingestion)
                              6. [Example (storage)](#example-storage)
                              7. [Keep reading](#keep-reading)

                              ---

                              ## Quick summary
                          - type: jsonSchema
                            data:
                              $ref: './data.oas2.yml#/definitions/BloodKetone'
                            header:
                              title: Blood ketones
                              subtitle: Quick summary
                          - type: text
                            data: >-
                              ---


                              ## Type (`type`)


                              Blood ketones represent ketone concentration
                              values (specifically beta-ketones) obtained from a
                              fingerstick meter capable of reading specialized
                              blood ketone testing strips. Tidepool does not yet
                              provide a data model for urine ketones, which are
                              measured qualitatively, not quantitatively.


                              ---


                              ## Value (`value`)


                              Tidepool has used the most popular blood ketone
                              meter on the American market — the Abbott
                              Precision Xtra — as a guide to choose 10.0 mmol/L
                              as the maximum value that will be accepted by
                              Platform. (The Abbott Precision Xtra yields HI for
                              blood ketone values higher than 8.0 mmol/L.)


                              ---


                              ## Example (client)

                              ```

                              {
                                  "type": "bloodKetone",
                                  "units": "mmol/L",
                                  "value": 4.2,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "guid": "14e3eca2-3e38-41f9-83ce-76ec01300b85",
                                  "id": "7f856a61e20045d1a8b6e0c4ada4ce69",
                                  "time": "2018-05-14T08:17:07.211Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (ingestion)

                              ```

                              {
                                  "type": "bloodKetone",
                                  "units": "mmol/L",
                                  "value": 4.6,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "time": "2018-05-14T08:17:07.212Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (storage)

                              ```

                              {
                                  "type": "bloodKetone",
                                  "units": "mmol/L",
                                  "value": 0.5,
                                  "_active": true,
                                  "_groupId": "abcdef",
                                  "_schemaVersion": 0,
                                  "_version": 0,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "createdTime": "2018-05-14T08:17:12.212Z",
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "guid": "602c5ebf-fd85-4972-b874-3d6f13d88166",
                                  "id": "38f80bd338e54522870c9ff8cf5f375d",
                                  "time": "2018-05-14T08:17:07.212Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ### Keep reading


                              * [Annotations](/device-data/annotations)

                              * [Common fields](/device-data/common-fields)

                              * [Out of range values](/device-data/oor-values)

                              * [Units](/device-data/units)
                    - title: Bolus
                      route:
                        path: /bolus
                      data:
                        blocks:
                          - type: text
                            data: >-
                              # Bolus insulin (`bolus`)


                              ---


                              ### Table of contents


                              1. [Overview](#overview)

                              2. [Duration](#duration-duration)

                              3. [Expected
                              duration](#expected-duration-expectedduration)

                              4. [Expected
                              extended](#expected-extended-expectedextended)

                              5. [Expected
                              normal](#expected-normal-expectednormal)

                              6. [Extended](#extended-extended)

                              7. [Normal](#normal-normal)

                              8. [Keep reading](#keep-reading)


                              ---


                              ## Overview


                              This is the Tidepool data type for one-time doses
                              of fast-acting insulin programmed on an insulin
                              pump to "cover" meals or correct high blood
                              glucose (hyperglycemia). A bolus event can be
                              interrupted or canceled, so the Tidepool data
                              model includes fields to represent programmed vs.
                              delivered bolus amounts and durations. This is
                              very important for behavioral auditing and
                              statistical analysis of a PwD's data to know
                              exactly how much insulin was delivered.


                              Insulin pumps provide several strategies for
                              delivering boluses of insulin. Each manufacturer
                              uses different terminology for each strategy,
                              although the strategies are equivalent across
                              insulin pumps. 


                              This page documents the fields shared by various
                              bolus sub-types. The three sub-types that fall
                              under the larger bolus type are:


                              *
                              [Combination](/device-data/data-types/bolus/combination)

                              *
                              [Extended](/device-data/data-types/bolus/extended)

                              * [Normal](/device-data/data-types/bolus/normal)

                              ---


                              ## Duration (`duration`)


                              The duration field represents the actual elapsed
                              duration of time, in milliseconds, spent
                              delivering the extended bolus.


                              The user interface for some insulin pumps allows a
                              user to program an extended bolus with a 0
                              duration. This is logically equivalent to a normal
                              bolus but for the sake of clarity, Tidepool
                              preserves the record as a sub-type "extended" and
                              allows the upload of the event with a value of 0
                              for duration.


                              In the case of combination boluses, the duration
                              is the elapsed time for the extended portion of
                              the bolus. While some insulin pumps (generally
                              ones that deliver normal insulin doses at a slower
                              rate for user comfort) include the duration of the
                              normal delivery in the data, Tidepool does not
                              currently include this information in our data
                              model. It is theoretically possible for a user to
                              input 0 duration for the extended portion of a
                              combo bolus, effectively programming a normal
                              bolus in a total amount equal to the normal and
                              extended insulin values added together.


                              ---


                              ## Expected duration (`expectedDuration`)


                              When an extended bolus is interrupted or canceled
                              by the user, the expected duration field is used
                              to store the value of the *original* programmed
                              dose of insulin represented in extended (whereas
                              duration encodes the *actual* elapsed duration of
                              dose delivery).


                              The value of expected duration must be greater
                              than or equal to the duration, since anything less
                              cannot be interrupted or canceled by a bolus.
                          - type: callout
                            data:
                              body: >-
                                The expected duration can only be equal to the
                                duration in the very rare and special case that
                                the duration is 0. See [duration](#duration) for
                                discussion of the values for this field.
                          - type: text
                            data: >-
                              ---


                              ## Expected extended (`expectedExtended`)


                              When an extended bolus is interrupted or canceled
                              by the user, the expected extended field is used
                              to store the value of the *original* programmed
                              dose of insulin (whereas extended represents the
                              value of the *actual* delivered dose).
                          - type: callout
                            data:
                              body: >
                                If a combination bolus is interrupted or
                                canceled during the extended portion of
                                delivery, the normal delivery should have
                                completed successfully, so the expected normal
                                field should *not* have a value. An example of
                                this type of interruption appears in the
                                examples below.
                              type: warning
                          - type: text
                            data: >-
                              ---


                              ## Expected normal (`expectedNormal`)


                              When a bolus is interrupted or canceled by the
                              user, the expected normal field is used to store
                              the value of the *original* programmed dose of
                              insulin (whereas normal represents the value of
                              the *actual* delivered dose).


                              The minimum value of expected normal is any value
                              greater than normal since anything less or equal
                              to normal cannot be interrupted or canceled by a
                              bolus. 


                              ---


                              ## Extended (`extended`)


                              The extended field represents the numerical value
                              of the insulin dose delivered over the duration by
                              an insulin pump. To avoid noise in the data,
                              Platform does not allow the upload of boluses with
                              a total delivered dose of 0 units.
                          - type: callout
                            data:
                              body: >
                                If a combination bolus is interrupted or
                                canceled during the normal portion of delivery,
                                the extended delivery should *not* have begun.
                                The value of extended and duration should be 0;
                                Expected extended and expected duration *should*
                                have values.
                              type: warning
                          - type: text
                            data: "---\n\n## Normal (`normal`)\n\t\t\nThe normal field represents the numerical value of the dose of insulin delivered by an insulin pump. To avoid noise in the data, Platform does not allow the upload of boluses with a total delivered dose of 0 units.\n\nThe *only* exception allowing a bolus with a normal of 0 units to upload through Platform, is if a user programs a bolus but cancels the delivery before any insulin has been successfully delivered. This should result in an expected normal field with a value greater than 0.\n\nInsulin pumps generally include a maximum bolus setting that a user can customize to their typical dosing to prevent accidental delivery of very large doses of insulin. Tidepool could not find a default maximum dose in insulin pumps and has chosen 100 units as an arbitrarily large maximum."
                          - type: callout
                            data:
                              body: >
                                A 0 for normal is allowable in more
                                circumstances for a combination bolus than for a
                                simple normal bolus. As long as the extended is
                                non-zero for the combination bolus, normal may
                                have a value of 0 without the requirement that a
                                non-zero expected normal also be present.
                          - type: text
                            data: >-
                              ---


                              ### Keep Reading


                              * [Annotations](/device-data/annotations)

                              * [Combination
                              bolus](/device-data/data-types/bolus/combination)

                              * [Common fields](/device-data/common-fields)

                              * [Extended
                              bolus](/device-data/data-types/bolus/extended)

                              * [Normal
                              bolus](/device-data/data-types/bolus/normal)

                              * [Pump
                              settings](/device-data/data-types/pump-settings)

                              * [Units](/device-data/units)
                        children:
                          - title: Combination Bolus
                            route:
                              path: /combination
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Combination bolus (`combination`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Example (client)](#example-client)
                                    4. [Example (ingestion)](#example-ingestion)
                                    5. [Example (storage)](#example-storage)
                                    6. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/BolusCombination
                                  header:
                                    title: Combination bolus
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)


                                    This is the sub-type of bolus event that
                                    represents a bolus insulin dose programmed
                                    to deliver part of the dose immediatley (a
                                    normal bolus) and the remainder delivered
                                    evenly over a duration of time (an extended
                                    bolus). Essentially, this sub-type is a
                                    combination of both normal and extended
                                    boluses.


                                    Most insulin pumps ask the user to divide
                                    the normal and extended portions of a
                                    combination bolus by percentage of the total
                                    insulin dose. Tidepool does not save this
                                    percentage directly but it can be worked out
                                    by looking at the appropriate combination
                                    and sum of values (e.g. normal, extended,
                                    expected normal and expected extended
                                    fields).


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "dual/square",
                                        "normal": 6.25,
                                        "extended": 5.75,
                                        "expectedExtended": 8.625,
                                        "duration": 23400000,
                                        "expectedDuration": 35100000,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:07",
                                        "guid": "dc114f19-74fe-4075-9676-38faec7cf0cc",
                                        "id": "d184a41eaf984afcbe553071f80bcdec",
                                        "time": "2018-05-14T08:17:07.035Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "dual/square",
                                        "normal": 9.25,
                                        "extended": 5.5,
                                        "expectedExtended": 8.25,
                                        "duration": 57600000,
                                        "expectedDuration": 86400000,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:07",
                                        "time": "2018-05-14T08:17:07.035Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "dual/square",
                                        "normal": 2.25,
                                        "extended": 9.5,
                                        "expectedExtended": 14.25,
                                        "duration": 48600000,
                                        "expectedDuration": 72900000,
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:12.035Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:07",
                                        "guid": "cf850a7a-1f28-4bbc-8a56-36cbe0326f20",
                                        "id": "4f8b8b133b22401aa1f281be9eb954ad",
                                        "time": "2018-05-14T08:17:07.035Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Bolus](/device-data/data-types/bolus)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Extended
                                    bolus](/device-data/data-types/bolus/extended)

                                    * [Normal
                                    bolus](/device-data/data-types/bolus/normal)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Units](/device-data/units)
                          - title: Extended Bolus
                            route:
                              path: /extended
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Extended bolus (`extended`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Example (client)](#example-client)
                                    4. [Example (ingestion)](#example-ingestion)
                                    5. [Example (storage)](#example-storage)
                                    6. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: './data.oas2.yml#/definitions/BolusExtended'
                                  header:
                                    title: Extended bolus
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)


                                    This is the sub-type of bolus event that
                                    represents a bolus insulin dose programmed
                                    to be delivered evenly over a duration of
                                    time (typically 15 minutes to several
                                    hours).


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "square",
                                        "extended": 9.75,
                                        "expectedExtended": 14.625,
                                        "duration": 3600000,
                                        "expectedDuration": 5400000,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:06",
                                        "guid": "05934ef2-230c-42cb-bebc-e2163462dbf7",
                                        "id": "5753389d95f842c283de92bb85ca43cf",
                                        "time": "2018-05-14T08:17:06.859Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```


                                    {
                                        "type": "bolus",
                                        "subType": "square",
                                        "extended": 8.25,
                                        "expectedExtended": 12.375,
                                        "duration": 25200000,
                                        "expectedDuration": 37800000,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:06",
                                        "time": "2018-05-14T08:17:06.860Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "square",
                                        "extended": 6,
                                        "expectedExtended": 9,
                                        "duration": 23400000,
                                        "expectedDuration": 35100000,
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:11.860Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:06",
                                        "guid": "23f71af0-f30b-4348-88f6-4169bd46ffcb",
                                        "id": "b862128865b34aabad71d02389717579",
                                        "time": "2018-05-14T08:17:06.860Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Bolus](/device-data/data-types/bolus)

                                    * [Combination
                                    bolus](/device-data/data-types/bolus/combination)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Normal
                                    bolus](/device-data/data-types/bolus/normal)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Units](/device-data/units)
                          - title: Normal Bolus
                            route:
                              path: /normal
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Normal bolus (`normal`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Example (client)](#example-client)
                                    4. [Example (ingestion)](#example-ingestion)
                                    5. [Example (storage)](#example-storage)
                                    6. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: './data.oas2.yml#/definitions/BolusNormal'
                                  header:
                                    subtitle: Quick summary
                                    title: Normal bolus
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)


                                    This is the sub-type of bolus event that
                                    represents a bolus insulin dose delivered
                                    within a matter of seconds or a small number
                                    of minutes (depending on the insulin pump
                                    and the user's settings). At Tidepool, we
                                    follow the common convention of representing
                                    normal boluses as point-in-time events since
                                    their durations are so short.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "normal",
                                        "normal": 7.75,
                                        "expectedNormal": 9.3,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:06",
                                        "guid": "3645b635-e97a-410b-b866-5ccc8cb98cbf",
                                        "id": "622cc9f88a61475f8a1290909ec56e5c",
                                        "time": "2018-05-14T08:17:06.676Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "normal",
                                        "normal": 4.5,
                                        "expectedNormal": 5.4,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:06",
                                        "time": "2018-05-14T08:17:06.676Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "bolus",
                                        "subType": "normal",
                                        "normal": 8.25,
                                        "expectedNormal": 9.9,
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:11.676Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:06",
                                        "guid": "5f7a9c48-ec16-449c-9597-2cef1f679096",
                                        "id": "8480f23a08484c91a7436475ee40c0c6",
                                        "time": "2018-05-14T08:17:06.676Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Bolus](/device-data/data-types/bolus)

                                    * [Combination
                                    bolus](/device-data/data-types/bolus/combination)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Extended
                                    bolus](/device-data/data-types/bolus/extended)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Units](/device-data/units)
                    - title: Continuous Blood Glucose
                      route:
                        path: /cbg
                      data:
                        blocks:
                          - type: text
                            data: |-
                              # Continuous blood glucose (`cbg`)

                              ---

                              ### Table of contents

                              1. [Quick summary](#quick-summary)
                              2. [Type](#type-type)
                              3. [Example (client)](#example-client)
                              4. [Example (ingestion)](#example-ingestion)
                              5. [Example (storage)](#example-storage)
                              6. [Keep reading](#keep-reading)

                              ---

                              ## Quick summary
                          - type: jsonSchema
                            data:
                              $ref: './data.oas2.yml#/definitions/ContinuousGlucose'
                            header:
                              title: Continuous blood glucose (CBG)
                              subtitle: Quick summary
                          - type: text
                            data: >-
                              ---


                              ## Type (`type`)


                              This is the Tidepool data type for continuous
                              glucose monitor sensor data. "CBG" is an
                              abbreviation of "continuous blood glucose" and
                              contrasts with "SMBG," abbreviating
                              "self-monitored blood glucose." SMBG is the
                              Tidepool data type for traditional fingerstick
                              blood glucose meter data.


                              The device time field is only optional for *this*
                              data type. This is because Tidepool is now
                              ingesting Dexcom G5 data via integration with
                              Apple's HealthKit, which only stores a
                              UTC-anchored timestamp and does not have "reciever
                              display time" like earlier generations of Dexcom
                              devices. 


                              ---


                              ## Example (client)

                              ```

                              {
                                  "type": "cbg",
                                  "units": "mmol/L",
                                  "value": 3.996538553552784,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "guid": "82bd8ef1-cfa1-4b49-9230-e2cecac7c5cd",
                                  "id": "b8858168bd4e447184ee7c7743ffe303",
                                  "time": "2018-05-14T08:17:07.384Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (ingestion)

                              ```

                              {
                                  "type": "cbg",
                                  "units": "mg/dL",
                                  "value": 421,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "time": "2018-05-14T08:17:07.385Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (storage)

                              ```

                              {
                                  "type": "cbg",
                                  "units": "mmol/L",
                                  "value": 27.25417263603357,
                                  "_active": true,
                                  "_groupId": "abcdef",
                                  "_schemaVersion": 0,
                                  "_version": 0,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "createdTime": "2018-05-14T08:17:12.385Z",
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "guid": "6ad8322a-e29d-4db7-825f-e0ad4c45d723",
                                  "id": "7779ad3759b14d1fadda7b5bab6d79bd",
                                  "time": "2018-05-14T08:17:07.385Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ### Keep reading


                              * [Annotations](/device-data/annotations)

                              * [CGM
                              settings](/device-data/data-types/cgm-settings)

                              * [Common fields](/device-data/common-fields)

                              * [Pump
                              settings](/device-data/data-types/pump-settings)

                              * [Self-monitored glucose
                              (SMBG)](/device-data/data-types/pump-settings/smbg)

                              * [Units](/device-data/units)
                    - title: CGM Settings
                      route:
                        path: /cgm-settings
                      data:
                        blocks:
                          - type: text
                            data: >-
                              # Continuous glucose monitor settings
                              (`cgmSettings`): Dexcom (`dexcom`)


                              ---


                              ### Table of contents


                              1. [Quick summary](#quick-summary)

                              2. [Overview](#overview)

                              3. [Type](#type-type)

                              4. [High alerts](#high-alerts-highalerts)

                              5. [Low alerts](#low-alerts-lowalerts)

                              6. [Out of range
                              alerts](#out-of-range-alerts-outofrangealerts)

                              7. [Rate of change
                              alerts](#rate-of-change-alerts-rateofchangealerts)

                              8. [Example (client)](#example-client)

                              9. [Example (ingestion)](#example-ingestion)

                              10. [Example (storage)](#example-storage)

                              11. [Keep reading](#keep-reading)


                              ---


                              ## Quick summary
                          - type: jsonSchema
                            data:
                              $ref: './data.oas2.yml#/definitions/CgmSettings'
                            header:
                              title: 'CGM settings: Dexcom'
                              subtitle: Quick summary
                          - type: text
                            data: >-
                              ---


                              ## Overview


                              This is the Tidepool data type representing the
                              settings on a continuous glucose monitor (CGM). A
                              CGM consists of a sensor inserted into
                              subcutaneous tissue, attached to a transmitter
                              clipped into the sensor's cradle, then attached to
                              the surface of the  skin with adhesive tape. 


                              Every five minutes, the transmitter sends a blood
                              glucose reading to a receiving device, which can
                              be: an insulin pump with receiving capabilities; a
                              dedicated hardware receiver; or an iPhone with a
                              companion app capable of receiving sensor
                              transmissions via Bluetooth. Retrospective data
                              collection from CGM systems happens via one of
                              these receiving devices. 


                              A CGM system can also be configured to alert the
                              user about glucose values that fall outside a
                              user-selected range.
                          - type: callout
                            data:
                              body: >-
                                Platform does not currently accept deduplicate
                                data, meaning if a user uploads the same data
                                from both a pump and a receiver, Tidepool
                                Uploader will reject one device's data and the
                                deduplicate data will not appear.
                          - type: text
                            data: >-
                              Currently, Tidepool only supports CGM settings
                              (not to be confused with [CGM
                              devices](https://www.tidepool.org/users/devices))
                              from Dexcom. However, we plan to offer support for
                              CGM settings from other manufacturers in the
                              future. 


                              ---


                              ## Type (`type`)


                              This is the Tidepool data type to represent CGM
                              settings at a given point in time — usually the
                              time of a data upload from the device. Most
                              CGM-receiving devices do not, unfortunately, keep
                              a historical record of all CGM settings whenever a
                              settings change is made. The safest assumption is
                              that the time on each CGM settings object
                              represents a time when the settings were read by
                              the device, *not* the first moment when the
                              settings became effective.


                              ---


                              ## High alerts (`highAlerts`)


                              The high alerts object encodes the user’s
                              preferences for receiving alerts about high blood
                              glucose events (hyperglycemia). 


                              Contains the following:


                              * Enabled

                              * Level: Threshold for high BG alerts 

                              * Snooze: Allows the user to configure how often
                              the alert should repeat if the person with
                              diabetes' blood glucose remains above the
                              threshold value. A common value is two hours


                              ---


                              ## Low alerts (`lowAlerts`)


                              The low alerts object encodes the user’s
                              preferences for receiving alerts about low blood
                              glucose events (hypoglycemia). 


                              Contains the following:


                              * Enabled

                              * Level: Threshold for low BG alerts

                              * Snooze: Allows the user to configure how often
                              the alert should repeat if the person with
                              diabetes' blood glucose remains below the
                              threshold value. A common value is 15 minutes


                              ---


                              ## Out of range alerts (`outOfRangeAlerts`)


                              The out of range alerts object encodes the user's
                              settings for receiving alerts from the receiver if
                              the connection between the transmitter and the
                              receiver has been disrupted. (This is typically
                              due to the transmitter being situated physically
                              out of range of the receiver.) 


                              Contains the following:


                              * Enabled

                              * Snooze
                          - type: callout
                            data:
                              body: >-
                                This value is not like the snooze on high alerts
                                and low alerts. More specifically, the time
                                value in an out of range alerts object is not a
                                setting for time between alerts but rather the
                                *amount* of time (counted by the receiver), that
                                the receiver's data connection with the
                                transmitter has been broken. We plan to migrate
                                to the term "threshold" in the future for
                                maximum clarity.
                          - type: text
                            data: >-
                              ---


                              ## Rate of change alerts (`rateOfChangeAlerts`)


                              The rate of change alerts object encodes the
                              user's preferences for receiving alerts when the
                              person with diabetes' blood glucose is changing
                              rapidly — either rising or falling. 


                              Contains the following:


                              * Enabled

                              * Rate: The rate of change triggers the alert
                          - type: callout
                            data:
                              body: >-
                                For the fall rate, the rate of change must be
                                specified as a *negative* value. Like all blood
                                glucose-related values in the Tidepool data
                                model, both the fall rate and rise rate may be
                                specified in either mg/dL or mmol/L, but will be
                                translated to mmol/L upon ingestion.
                          - type: text
                            data: >-
                              ---


                              ## Example (client)

                              ```

                              {
                                  "type": "cgmSettings",
                                  "highAlerts": {
                                      "enabled": true,
                                      "level": 10.82395858253879,
                                      "snooze": 4500000
                                  },
                                  "lowAlerts": {
                                      "enabled": true,
                                      "level": 3.33044879462732,
                                      "snooze": 1800000
                                  },
                                  "outOfRangeAlerts": {
                                      "enabled": false,
                                      "snooze": 1800000
                                  },
                                  "rateOfChangeAlerts": {
                                      "fallRate": {
                                          "enabled": true,
                                          "rate": -0.055507479910455335
                                      },
                                      "riseRate": {
                                          "enabled": false,
                                          "rate": 0.055507479910455335
                                      }
                                  },
                                  "transmitterId": "C8E65",
                                  "units": "mmol/L",
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "guid": "6d15f48c-3734-4ad1-8f39-9b374f1d127f",
                                  "id": "02ccebd2affc472d9b296d4f1f800dfd",
                                  "time": "2018-05-14T08:17:07.560Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (ingestion)

                              ```

                              {
                                  "type": "cgmSettings",
                                  "highAlerts": {
                                      "enabled": true,
                                      "level": 185,
                                      "snooze": 2700000
                                  },
                                  "lowAlerts": {
                                      "enabled": true,
                                      "level": 85,
                                      "snooze": 900000
                                  },
                                  "outOfRangeAlerts": {
                                      "enabled": false,
                                      "snooze": 3600000
                                  },
                                  "rateOfChangeAlerts": {
                                      "fallRate": {
                                          "enabled": true,
                                          "rate": -2
                                      },
                                      "riseRate": {
                                          "enabled": false,
                                          "rate": 2
                                      }
                                  },
                                  "transmitterId": "BE61A",
                                  "units": "mg/dL",
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "time": "2018-05-14T08:17:07.561Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (storage)

                              ```

                              {
                                  "type": "cgmSettings",
                                  "highAlerts": {
                                      "enabled": true,
                                      "level": 10.268883783434237,
                                      "snooze": 4500000
                                  },
                                  "lowAlerts": {
                                      "enabled": true,
                                      "level": 3.8855235937318735,
                                      "snooze": 1800000
                                  },
                                  "outOfRangeAlerts": {
                                      "enabled": false,
                                      "snooze": 3600000
                                  },
                                  "rateOfChangeAlerts": {
                                      "fallRate": {
                                          "enabled": false,
                                          "rate": -0.11101495982091067
                                      },
                                      "riseRate": {
                                          "enabled": false,
                                          "rate": 0.16652243973136602
                                      }
                                  },
                                  "transmitterId": "E3250",
                                  "units": "mmol/L",
                                  "_active": true,
                                  "_groupId": "abcdef",
                                  "_schemaVersion": 0,
                                  "_version": 0,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "createdTime": "2018-05-14T08:17:12.561Z",
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:07",
                                  "guid": "393c9563-705a-4832-b935-cbf23d759f77",
                                  "id": "7cb8be46bb9447de8b4f5f90d1bd5486",
                                  "time": "2018-05-14T08:17:07.561Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ### Keep reading


                              * [Annotations](/device-data/annotations)

                              * [Continuous blood
                              glucose](/device-data/data-types/cbg)

                              * [Common fields](/device-data/common-fields)

                              * [Out of range values](/device-data/oor-values)

                              * [Units](/device-data/units)
                    - title: Device Event
                      route:
                        path: /device-event
                      data:
                        blocks:
                          - type: text
                            data: '# Device event (`deviceEvent`)'
                          - type: text
                            data: >-
                              This is the Tidepool data type for a variety of
                              events that can occur on diabetes devices,
                              including both insulin pumps and continuous
                              glucose monitors. As a type, it is essentially a
                              "grab bag" of miscellaneous sub-types, where each
                              sub-type has its own data model that often differs
                              widely from sub-type to sub-type.


                              Along with Tidepool's release of ["Bootstrapping
                              to UTC"](/datetime/btutc) (BtUTC), we introduced
                              the current device event model to reflect that
                              this group of sub-types brings together
                              miscellaneous events that are user-initiated or
                              surfaced to the user. 
                          - type: callout
                            data:
                              body: >
                                These sub-types are *not* device metadata that
                                may be user-invisible (or irrelevant to the
                                user), such as device model and serial numbers,
                                etc.
                          - type: text
                            data: >-
                              ## Device event sub-types:


                              *
                              [Alarm](/device-data/data-types/device-event/alarm)

                              *
                              [Calibration](/device-data/data-types/device-event/calibration)

                              *
                              [Prime](/device-data/data-types/device-event/prime)

                              * [Reservoir
                              change](/device-data/data-types/device-event/reservoir-change)

                              *
                              [Status](/device-data/data-types/device-event/status)

                              * [Time
                              change](/device-data/data-types/device-event/time-change)
                        children:
                          - title: Alarm
                            route:
                              path: /alarm
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Alarm (`alarm`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Alarm types](#alarm-types-alarmtypes)
                                    4. [Status](#status-status)
                                    5. [Example (client)](#example-client)
                                    6. [Example (ingestion)](#example-ingestion)
                                    7. [Example (storage)](#example-storage)
                                    8. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: './data.oas2.yml#/definitions/DeviceAlarm'
                                  header:
                                    title: Device alarm
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)


                                    The alarm sub-type describes alerts and
                                    alarms surfaced to the user by insulin pumps
                                    and continuous glucose monitors.


                                    ---


                                    ## Alarm types (`alarmType`)


                                    The alarm types built into the data model
                                    are common alarms to most insulin pumps or
                                    continuous glucose monitors. At present,
                                    Tidepool has only modeled the set of alarms
                                    for insulin pumps:


                                    * **Auto off :** When an insulin pump stops
                                    all insulin delivery due to inactivity for a
                                    duration over the user's programmed
                                    threshold

                                    * **Low insulin :** Low insulin reservoir
                                    alerts and alarms

                                    * **Low power :** Low battery alerts and
                                    alarms

                                    * **No delivery :** Alarms signaling any
                                    other stoppage of insulin delivery when a
                                    more precise cause (such as an occlusion or
                                    empty reservoir) is not indicated by the
                                    pump

                                    * **No insulin :** Empty insulin reservoir
                                    alarms

                                    * **No power :** Dead battery alarms

                                    * **Occlusion :** Alarms regarding blockage
                                    of insulin infusion lines or sites

                                    * **Over limit :** When insulin delivery has
                                    surpassed any of a user's programmed maximum
                                    bolus, basal, or hourly delivery thresholds


                                    Most alarm events include a "payload" object
                                    with more device-specific information about
                                    the alarm. For example, a low insulin alarm
                                    may have a "units left" field in its payload
                                    to record the  units of insulin remaining in
                                    the  pump's reservoir at the time of the
                                    alarm.


                                    A payload object is required when the alarm
                                    type is "other", which is the alarm type
                                    used for all device-specific alarms. For
                                    example, a pod expiration alarm is specific
                                    to the Insulet OmniPod insulin delivery
                                    system. The payload object should include
                                    all information that could be relevant to
                                    anyone wishing to audit the history and
                                    performance of the insulin pump in question.
                                - type: callout
                                  data:
                                    body: >-
                                      Some pumps may use the no delivery alarm
                                      for all stoppages of delivery and may not
                                      distinguish between empty reservoirs and
                                      occlusions.
                                - type: text
                                  data: >-
                                    An alarm event may be the only indication of
                                    a suspension of insulin delivery in some
                                    devices. In such a case, a status event
                                    should also be uploaded to Platform and
                                    included (in its entirety) in the status
                                    field of the alarm event.


                                    ---


                                    ## Status (`status`)


                                    Some alarm types are correlated with a
                                    stoppage of insulin delivery. Tidepool
                                    assumes the following alarms correspond to a
                                    period of no insulin delivery on the insulin
                                    pump (i.e. the pump's delivery status is
                                    suspended):


                                    * Auto off

                                    * No delivery

                                    * No insulin

                                    * No power

                                    * Occlusion


                                    Some insulin pumps include indication of
                                    this stoppage both in the alarm event and
                                    elsewhere in their data protocols. Other
                                    insulin pumps, however, do not separately
                                    indicate the change in the pump's insulin
                                    delivery status. For such devices, a status
                                    event should be fabricated using the
                                    relevant information from the alarm event
                                    (timestamp, log index, etc.) and then
                                    embedded in the originating alarm to
                                    preserve the close connection between
                                    events. This also provides an audit trail of
                                    the user's processed and standardized data.


                                    See [linking
                                    events](/device-data/linking-events) for
                                    additional details regarding inter-event
                                    linking in the Tidepool platform.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "alarm",
                                        "alarmType": "occlusion",
                                        "status": "4907943557f440dfbc12bdef4f85e01c",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:07",
                                        "guid": "e3c82e3d-23ba-4048-9056-7b1b3c5aa4cc",
                                        "id": "d5ed640dd8f74e6cb1a6bff796de3ba2",
                                        "time": "2018-05-14T08:17:07.920Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "alarm",
                                        "alarmType": "low_insulin",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:07",
                                        "time": "2018-05-14T08:17:07.920Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "alarm",
                                        "alarmType": "low_power",
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:12.920Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:07",
                                        "guid": "d19fe993-f26e-49d9-ac22-48be650a8e97",
                                        "id": "a74b59b21581466b9d9f60811d327df2",
                                        "time": "2018-05-14T08:17:07.920Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    *
                                    [Calibration](/device-data/data-types/device-event/calibration)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Device
                                    event](/device-data/data-types/device-event)

                                    * [Linking
                                    events](/device-data/linking-events)

                                    *
                                    [Prime](/device-data/data-types/device-event/prime)

                                    * [Pump
                                    settings](device-data/data-types/pump-settings)

                                    * [Reservoir
                                    change](/device-data/data-types/device-event/reservoir-change)

                                    *
                                    [Status](/device-data/data-types/device-event/status)

                                    * [Time
                                    change](/device-data/data-types/device-event/time-change)
                          - title: Calibration
                            route:
                              path: /calibration
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Calibration (`calibration`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Example (client)](#example-client)
                                    4. [Example (ingestion)](#example-ingestion)
                                    5. [Example (storage)](#example-storage)
                                    6. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/DeviceCalibration
                                  header:
                                    title: Calibration
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)

                                    The calibration sub-type of device event
                                    represents a user's manual entry of a
                                    self-monitored glucose (SMBG) value to
                                    calibrate a continuous glucose monitoring
                                    (CGM) device.


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "calibration",
                                        "units": "mg/dL",
                                        "value": 129,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "time": "2018-05-14T08:17:08.097Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "calibration",
                                        "units": "mmol/L",
                                        "value": 17.873408531166618,
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:13.097Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "26c9190e-8bc5-4d39-82ff-5085275207fb",
                                        "id": "5637b3ce3ff24eaea5006d22d79b62ea",
                                        "time": "2018-05-14T08:17:08.097Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    *
                                    [Alarm](/device-data/data-types/device-event/alarm)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Continuous blood
                                    glucose](/device-data/data-types/cbg)

                                    * [Device
                                    event](/device-data/data-types/device-event)

                                    *
                                    [Prime](/device-data/data-types/device-event/prime)

                                    * [Pump
                                    settings](device-data/data-types/pump-settings)

                                    * [Reservoir
                                    change](/device-data/data-types/device-event/reservoir-change)

                                    *
                                    [Status](/device-data/data-types/device-event/status)

                                    * [Time
                                    change](/device-data/data-types/device-event/time-change)
                          - title: Prime
                            route:
                              path: /prime
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Prime (`prime`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Prime target](#prime-target-primetarget)
                                    4. [Volume](#volume-volume)
                                    5. [Example (client)](#example-client)
                                    6. [Example (ingestion)](#example-ingestion)
                                    7. [Example (storage)](#example-storage)
                                    8. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/DevicePrimeEvent
                                  header:
                                    title: Prime
                                    subtitle: Quick summary
                                - type: text
                                  data: >+
                                    ---


                                    ## Sub-type (`subType`)


                                    The prime sub-type of device event
                                    represents a user's "priming" of either an
                                    insulin infusion line (used with traditional
                                    insulin pumps) or an insulin delivery
                                    cannula (used in tubeless patch pumps and
                                    some traditional pumps). 


                                    To "prime" an infusion line or cannula is to
                                    fill it with insulin either:


                                    * While disconnected from the user

                                    * Or, in preparation for a site or reservior
                                    change 


                                    The priming process removes any air from the
                                    tubing or cannula to ensure seamless insulin
                                    delivery.


                                    ---


                                    ## Prime target (`primeTarget`)


                                    The prime target field identifies the object
                                    of the priming action — "tubing" for an
                                    infusion line prime or "cannula" for a
                                    cannula prime.


                                    Most commonly, tubing and cannula prime
                                    events will occur as a pair separated only
                                    by seconds or minutes. However, many
                                    combinations of prime events are possible.
                                    For example, no priming events appear in an 
                                    OmniPod's data, as the device primes
                                    automatically without notifying the user. 


                                    Among traditional pump users, priming
                                    behavior varies considerably. Those who use
                                    steel cannulas must prime the cannula and
                                    tubing simultaneously, as the steel cannula
                                    and infusion line are inseparable. In this
                                    case, only tubing primes will appear in the
                                    data. Other insulin pump users can change
                                    the infusion site independently (without
                                    changing the insulin reservoir), causing a
                                    cannula prime to appear *without* a tubing
                                    prime. 


                                    ---


                                    ## Volume (`volume`)


                                    Where available in the data, the volume of a
                                    priming event should be included to measure
                                    insulin expended from the priming action.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "prime",
                                        "primeTarget": "cannula",
                                        "volume": "0.5",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "7637c7b9-6286-4f93-8953-d619e42cb1a5",
                                        "id": "bfc3e597e16c436a94a03d7fd095a774",
                                        "time": "2018-05-14T08:17:08.276Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "prime",
                                        "primeTarget": "tubing",
                                        "volume": 12,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "time": "2018-05-14T08:17:08.276Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "prime",
                                        "primeTarget": "tubing",
                                        "volume": 15.3,
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:13.276Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "a6f76c8d-38e5-4c60-96d9-8df53b0fb9e8",
                                        "id": "94e1776ca9384280bd347691e105b02f",
                                        "time": "2018-05-14T08:17:08.276Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    *
                                    [Alarm](/device-data/data-types/device-event/alarm)

                                    *
                                    [Calibration](/device-data/data-types/device-event/calibration)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Device
                                    event](/device-data/data-types/device-event)

                                    * [Pump
                                    settings](device-data/data-types/pump-settings)

                                    * [Reservoir
                                    change](/device-data/data-types/device-event/reservoir-change)

                                    *
                                    [Status](/device-data/data-types/device-event/status)

                                    * [Time
                                    change](/device-data/data-types/device-event/time-change)

                          - title: Reservoir Change
                            route:
                              path: /reservoir-change
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Reservoir change (`reservoirChange`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Status](#status-status)
                                    4. [Example (client)](#example-client)
                                    5. [Example (ingestion)](#example-ingestion)
                                    6. [Example (storage)](#example-storage)
                                    7. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/DeviceReservoirChange
                                  header:
                                    title: Reservoir change
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)


                                    A reservoir change event represents a recent
                                    change or refill of the insulin reservoir.
                                    Conventional insulin pumps refer to this as
                                    a "rewind" event, whereas an Insulet OmniPod
                                    system will call this a "deactivation"
                                    event. 


                                    The optional payload object should include
                                    device-specific and event-specific
                                    information that is being interpreted more
                                    generally as a reservoir change and/or may
                                    be desirable for auditing user and device
                                    behavior and performance.


                                    ---


                                    ## Status (`status`)


                                    This event often implies a suspension of
                                    insulin delivery. If the device data
                                    includes a reservoir change (rewind or
                                    deactivation) event but does not include
                                    separate indication of insulin delivery
                                    suspension, a status event should be
                                    uploaded to Platform to record the
                                    suspension of insulin delivery. This event
                                    should include relevant information from the
                                    reservoir change event (e.g. timestamp and
                                    log index) and get embedded into the
                                    reservoir change event to provide an audit
                                    trail of the user's data and to preserve the
                                    close connection between the stored events.


                                    See [linking
                                    events](/device-data/linking-events) for
                                    additional details regarding inter-event
                                    linking in the Tidepool platform.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "reservoirChange",
                                        "status": "e0c1998c36d643d49d09047833064314",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "075b8a5e-4404-4987-8df8-54d2fed20c09",
                                        "id": "8ce74bae4d294f058bbf96102b6b44f9",
                                        "time": "2018-05-14T08:17:08.453Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "reservoirChange",
                                        "status": {
                                            "type": "deviceEvent",
                                            "subType": "status",
                                            "status": "suspended",
                                            "duration": 64800000,
                                            "expectedDuration": 77760000,
                                            "reason": {
                                                "suspended": "manual",
                                                "resumed": "manual"
                                            },
                                            "clockDriftOffset": 0,
                                            "conversionOffset": 0,
                                            "deviceId": "DevId0987654321",
                                            "deviceTime": "2018-05-14T18:17:08",
                                            "time": "2018-05-14T08:17:08.453Z",
                                            "timezoneOffset": 600,
                                            "uploadId": "SampleUploadId"
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "time": "2018-05-14T08:17:08.453Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "reservoirChange",
                                        "status": "e50c3da3a35e47f2a8ef769406a0805d",
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:13.453Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "96013c51-c2f5-4557-ad0b-479151cf0512",
                                        "id": "6e3ea4734056463f84f6be47621d21d7",
                                        "time": "2018-05-14T08:17:08.453Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    *
                                    [Alarm](/device-data/data-types/device-event/alarm)

                                    *
                                    [Calibration](/device-data/data-types/device-event/calibration)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Device
                                    event](/device-data/data-types/device-event)

                                    * [Linking
                                    events](/device-data/linking-events)

                                    *
                                    [Prime](/device-data/data-types/device-event/prime)

                                    * [Pump
                                    settings](device-data/data-types/pump-settings)

                                    *
                                    [Status](/device-data/data-types/device-event/status)

                                    * [Time
                                    change](/device-data/data-types/device-event/time-change)
                          - title: 'Sensor Event [PROPOSED]'
                            route:
                              path: /sensor-event
                            data:
                              blocks:
                                - type: text
                                  data: '# Sensor event (`sensorEvent`)'
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/DeviceSensorEvent
                                  header:
                                    title: Sensor event
                                    subtitle: Quick summary
                                - type: text
                                  data: |-
                                    ## Example
                                    ```
                                    {
                                      "type": "deviceEvent",
                                      "subType": "sensorEvent",
                                      "eventType": "expired",
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2018-05-14T18:17:08",
                                      "time": "2018-05-14T08:17:08.276Z",
                                      "timezoneOffset": 600,
                                      "uploadId": "SampleUploadId"
                                    }
                                    ```
                          - title: 'Settings Change [PROPOSED]'
                            route:
                              path: /settings-change
                            data:
                              blocks:
                                - type: text
                                  data: '# Device settings change (`settingsChange`)'
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/DeviceSettingsChange
                                  header:
                                    title: Device settings change
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    An event that occurs when a device has
                                    switched to a different setting.


                                    ## Example

                                    ```

                                    {
                                      "type": "deviceEvent",
                                      "subType": "settingsChange",
                                      "bgTarget": {
                                        "from": "Standard",
                                        "to": "Workout"
                                      },
                                      "clockDriftOffset": 0,
                                      "conversionOffset": 0,
                                      "deviceId": "DevId0987654321",
                                      "deviceTime": "2018-05-14T18:17:08",
                                      "time": "2018-05-14T08:17:08.276Z",
                                      "timezoneOffset": 600,
                                      "uploadId": "SampleUploadId"
                                    }

                                    ```
                          - title: Status
                            route:
                              path: /status
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    # Status (`status`)


                                    ---


                                    ### Table of contents


                                    1. [Quick summary](#quick-summary)

                                    2. [Sub-type](#subtype-subtype)

                                    3. [Duration](#duration-duration)

                                    4. [Expected
                                    duration](#expected-duration-expectedduration)

                                    5. [Reason](#reason-reason)

                                    6. [Status](#status-status)

                                    7. [Example (client)](#example-client)

                                    8. [Example (ingestion)](#example-ingestion)

                                    9. [Example (storage)](#example-storage)

                                    10. [Keep reading](#keep-reading)


                                    ---


                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/DeviceDeliveryStatus
                                  header:
                                    title: Status
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)


                                    This is the Tidepool data type for an
                                    insulin pump's insulin delivery status. This
                                    is used to represent suspensions of insulin
                                    delivery — intervals of time when neither
                                    bolus or basal insulin is delivered by an
                                    insulin pump. When a user suspends an
                                    insulin pump or the pump suspends itself
                                    automatically, any bolus currently in
                                    progress is terminated and the basal insulin
                                    is stopped.


                                    In the same way that suspensions of insulin
                                    delivery can be either manual or automatic,
                                    the resumption of insulin delivery can be
                                    the result of automatic or user action. 


                                    ---


                                    ## Duration (`duration`)


                                    The duration field is required on all status
                                    events. Platform will determine the duration
                                    of suspensions of insulin delivery based on
                                    the sequence of suspend and resume events. 


                                    There is no maximum duration for suspensions
                                    of insulin delivery because there is no
                                    maximum value of this in reality. For
                                    example, a user may switch between different
                                    insulin delivery devices or go on a "pump
                                    vacation", thererfore leaving a particular
                                    device in the suspended mode for an
                                    arbitrary duration of time counted in days,
                                    weeks, or even months. 


                                    ---


                                    ## Expected duration (`expectedDuration`)


                                    Most insulin delivery devices do not provide
                                    an interface for scheduling suspensions of
                                    insulin delivery, so the pump automatically
                                    resumes after the scheduled time period.
                                    However, the Insulet OmniPod insulin
                                    delivery system does provide an interface of
                                    this kind. It is only for an OmniPod system
                                    that it is possible — though still optional
                                    — for an expected duration field to appear.
                                    When this field is present, the value of
                                    expected duration is the *original*
                                    user-programmed duration for the suspension
                                    of insulin delivery. 


                                    The duration of the event will have a
                                    smaller value representing the *actual*
                                    elapsed time of the suspension, which must
                                    have been canceled by the user prior to its
                                    scheduled conclusion.
                                - type: callout
                                  data:
                                    body: >-
                                      To change the date & time on an OmniPod
                                      system, it is necessary to suspend the
                                      device. This is one common workflow that
                                      results in the early cancelation of a
                                      scheduled suspension of insulin delivery.
                                - type: text
                                  data: >-
                                    ---


                                    ## Reason (`reason`)


                                    The reason is a simplified indication of why
                                    the pump delivery status changed, both on
                                    suspension and resumption of insulin
                                    delivery. 


                                    When pushing up data through Platform, the
                                    reason object should include both the
                                    suspended and resumed keys with possible
                                    manual and automatic values for each.


                                    We define manual suspension or resumption as
                                    any user-initiated method of effecting these
                                    states, and we define automatic as anything
                                    not user-initiated. One type of automatic
                                    suspension  occurs on insulin pumps that
                                    include a low-glucose suspend feature (LGS).
                                    This involves the pump "listening" to data
                                    from a blood glucose sensor (i.e. CBG data)
                                    and suspending insulin delivery if the blood
                                    glucose values either drop below a certain
                                    threshold, or are predicted to soon drop
                                    below the threshold. The insulin delivery
                                    device may also automatically resume from
                                    the suspended state in response to rising
                                    blood glucose values or after a certain
                                    amount of time has elapsed.


                                    We also include more device-specific
                                    information about the cause of suspensions
                                    and resumptions, if available, in the
                                    optional payload embedded object on the
                                    event. 


                                    For example, in the case of the Medtronic
                                    530G insulin pumps with the LGS feature,
                                    there is a distinction in circumstances when
                                    determing whether or not a temp basal that
                                    was in effect *before* the automatic
                                    suspension is resumed. If the user *did not*
                                    interact with any of the alerts during the
                                    automatic suspension, the temp basal does
                                    not resume. If the user *did* acknowledge
                                    the automatic suspension, a temp basal is
                                    resumed at the conclusion of two hours of
                                    suspension. This is explained on pages
                                    124–125 of the [Medtronic 530G user
                                    manual](http://www.accessdata.fda.gov/cdrh_docs/pdf12/p120010c.pdf). 


                                    We represent this distinction on the event
                                    in the payload as follows (specifically in
                                    the user intervention key under resumed):


                                    ```

                                    {
                                        ...
                                        "reason": {
                                            "suspended": "automatic",
                                            "resumed": "automatic"
                                        },
                                        "payload": {
                                            "suspended": {
                                                "cause": "low_glucose",
                                                "threshold": 80
                                            },
                                            "resumed": {
                                                "cause": "timed_out",
                                                "user_intervention": "ignored"
                                            }
                                        }
                                        ...
                                    }

                                    ```


                                    ---


                                    ## Status (`status`)


                                    An insulin pump can only be in one of two
                                    insulin delivery states: normal operation or
                                    suspended.


                                    Platform will only accept a suspended value
                                    for the status field.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "status",
                                        "status": "suspended",
                                        "duration": 64800000,
                                        "expectedDuration": 77760000,
                                        "reason": {
                                            "suspended": "automatic",
                                            "resumed": "manual"
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "9f38f6b2-42b0-4194-958c-84efaeb18f3f",
                                        "id": "eb9ed08320f645c787d892bb75eb7bfd",
                                        "time": "2018-05-14T08:17:08.634Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "status",
                                        "status": "suspended",
                                        "duration": 77400000,
                                        "expectedDuration": 92880000,
                                        "reason": {
                                            "suspended": "manual",
                                            "resumed": "manual"
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "time": "2018-05-14T08:17:08.635Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "status",
                                        "status": "suspended",
                                        "duration": 23400000,
                                        "expectedDuration": 28080000,
                                        "reason": {
                                            "suspended": "automatic",
                                            "resumed": "manual"
                                        },
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:13.635Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "a0e4a309-e845-4912-a112-5c71e23da76b",
                                        "id": "344abda0c652428a8fab0b5fe3153e54",
                                        "time": "2018-05-14T08:17:08.635Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    *
                                    [Alarm](/device-data/data-types/device-event/alarm)

                                    *
                                    [Calibration](/device-data/data-types/device-event/calibration)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Device
                                    event](/device-data/data-types/device-event)

                                    * [Linking
                                    events](/device-data/linking-events)

                                    *
                                    [Prime](/device-data/data-types/device-event/prime)

                                    * [Pump
                                    settings](device-data/data-types/pump-settings)

                                    * [Reservoir
                                    change](/device-data/data-types/device-event/reservoir-change)

                                    * [Time
                                    change](/device-data/data-types/device-event/time-change)
                          - title: Time Change
                            route:
                              path: /time-change
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Time change (`timeChange`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Sub-type](#subtype-subtype)
                                    3. [Change](#change-change)
                                    4. [Example (client)](#example-client)
                                    5. [Example (ingestion)](#example-ingestion)
                                    6. [Example (storage)](#example-storage)
                                    7. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/DeviceTimeChange
                                  header:
                                    title: Time change
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Sub-type (`subType`)


                                    A time change event represents an instance
                                    when a diabetes device user changed the
                                    display date & time settings on the device.
                                    An accurate history of time change events is
                                    crucial as Platform uses the most recent set
                                    of time change events, raw log from a
                                    device's records and user's selection of
                                    timezone to translate relative (local time)
                                    timestamps of device records into UTC
                                    timestamps. This is to align all diabetes
                                    device timelines. For further information,
                                    please see ["Bootstrapping" to
                                    UTC](/datetime/btutc). 


                                    All the relevant data from the time change
                                    event is stored in various fields on an
                                    embedded change object.


                                    ---


                                    ## Change (`change`)


                                    Contains the following properties:


                                    * From

                                    * To

                                    * Method


                                    When a device's date & time is updated, the
                                    **to**, **from** and **method** fields
                                    should be included within the change
                                    embedded object on a time change event. The
                                    from field details the date & time the
                                    device *is being changed from* (the old date
                                    & time). The to field details the date &
                                    time the device *is being changed to* (the
                                    new date & time). Both the from and to
                                    properties are formatted as ISO 8601
                                    timestamps without any offset from UTC
                                    specified; this is the exact same "relative"
                                    timestamp format used for [device
                                    time](/device-data/common-fields#device-time-devicetime).


                                    The method field on the change object
                                    details whether the time change was manual
                                    (user-initiated) or automatic (initiated by
                                    the device). 


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "timeChange",
                                        "change": {
                                            "from": "2018-05-14T08:17:08",
                                            "to": "2018-05-14T07:20:33",
                                            "agent": "manual"
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "7a91b3bc-2808-4c92-8769-3526db11ce41",
                                        "id": "0ccaad06f9104c098595cf6e871edc09",
                                        "time": "2018-05-14T08:17:08.814Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "timeChange",
                                        "change": {
                                            "from": "2018-05-14T08:17:08",
                                            "to": "2018-05-14T07:20:33",
                                            "agent": "manual"
                                        },
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "time": "2018-05-14T08:17:08.815Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "deviceEvent",
                                        "subType": "timeChange",
                                        "change": {
                                            "from": "2018-05-14T08:17:08",
                                            "to": "2018-05-14T07:20:33",
                                            "agent": "manual"
                                        },
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:13.815Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:08",
                                        "guid": "2f17e38d-a39a-4116-a11c-5f014ea9ddd4",
                                        "id": "8f3abbd0fe4f49879f1bd8b2356c1942",
                                        "time": "2018-05-14T08:17:08.815Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    *
                                    [Alarm](/device-data/data-types/device-event/alarm)

                                    * [Bootstrapping to UTC](/datetime/btutc)

                                    *
                                    [Calibration](/device-data/data-types/device-event/calibration)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Device
                                    event](/device-data/data-types/device-event)

                                    *
                                    [Prime](/device-data/data-types/device-event/prime)

                                    * [Pump
                                    settings](device-data/data-types/pump-settings)

                                    * [Reservoir
                                    change](/device-data/data-types/device-event/reservoir-change)

                                    *
                                    [Status](/device-data/data-types/device-event/status)
                    - title: 'Device Status [PROPOSED]'
                      route:
                        path: /device-status
                      data:
                        blocks:
                          - type: text
                            data: '# Device status (`deviceStatus`)'
                          - type: jsonSchema
                            data:
                              $ref: './data.oas2.yml#/definitions/DeviceStatus'
                            header:
                              title: Device status
                              subtitle: Quick summary
                          - type: text
                            data: >-
                              This type is used to convey the status of a
                              device.


                              ## Example (insulin pump)

                              ```

                              {
                                  "type": "deviceStatus",
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "createdTime": "2018-05-14T08:17:13.453Z",
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:08",
                                  "guid": "96013c51-c2f5-4557-ad0b-479151cf0512",
                                  "id": "6e3ea4734056463f84f6be47621d21d7",
                                  "time": "2018-05-14T08:17:08.453Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId",
                                  "deviceType": "pump",
                                  "status": [
                                    {
                                      "battery": {
                                        "value": 50,
                                        "unit": "percent"
                                      }
                                    },
                                    {
                                      "reservoirRemaining": {
                                        "amount": 170,
                                        "unit": "Units"
                                      }
                                    },
                                    {
                                      "alerts": [
                                        "Something bad is happening with the pump"
                                      ]
                                    }
                                  ]
                              }

                              ```


                              ## Example (AID)

                              ```

                              {
                                  "type": "deviceStatus",
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:08",
                                  "guid": "96013c51-c2f5-4557-ad0b-479151cf0512",
                                  "id": "6e3ea4734056463f84f6be47621d21d7",
                                  "time": "2018-05-14T08:17:08.453Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId",
                                  "deviceType": "aid",
                                  "status": [
                                    {
                                      "battery": {
                                        "unit": "percent",
                                        "value": 75
                                      }
                                    },
                                    {
                                      "signalStrength": {
                                        "unit": "dB",
                                        "value": -65
                                      }
                                    },
                                    {
                                      "alerts": [
                                        "Loop tried to bolus, but didn't hear back from the pump"
                                      ]
                                    },
                                    {
                                      "forecast": {
                                        "startTime": "2018-05-14T08:18:00.000Z",
                                        "timeScale": 300000,
                                        "type": "bloodGlucose",
                                        "unit": "mg/dL",
                                        "values": [
                                          121,
                                          123,
                                          125,
                                          128,
                                          131,
                                          135,
                                          132,
                                          130
                                        ]
                                      }
                                    },
                                    {
                                      "forecast": {
                                        "startTime": "2018-05-14T08:18:00.000Z",
                                        "timeScale": 300000,
                                        "type": "carbsOnBoard",
                                        "unit": "g",
                                        "values": [
                                          40,
                                          38,
                                          36,
                                          35,
                                          34,
                                          33
                                        ]
                                      }
                                    }
                                  ],
                                  "version": "1.0.2"
                              }

                              ```
                    - title: Pump Settings
                      config:
                        sidebar:
                          token: ''
                      route:
                        path: /pump-settings
                      data:
                        blocks:
                          - type: text
                            data: "# Pump settings (`pumpSettings`)\n\n---\n\n### Table of contents\n\n1. [Quick summary](#quick-summary)\n2. [Type](#type-type)\n3. [Active schedule](#active-schedule-activeschedule)\n4. [Basal schedules](#basal-schedules-basalschedules)\n\t1. [Rate](#rate-rate)\n\t2. [Start](#start-start)\n5. [Blood glucose target](#blood-glucose-target-bgtarget)\n6. [Carb ratio](#carb-ratio-carbratio)\n7. [Insulin sensitivity](#insulin-sensitivity-insulinsensitivity)\n8. [Units](#units-units)\n9. [Example (client)](#example-client)\n10. [Example (ingestion)](#example-ingestion)\n11. [Example (storage)](#example-storage)\n12. [Keep reading](#keep-reading)\n\n---\n\n## Quick summary"
                          - type: jsonSchema
                            data:
                              $ref: './data.oas2.yml#/definitions/PumpSettings'
                            header:
                              title: Pump settings
                              subtitle: Quick summary
                          - type: text
                            data: >-
                              ---


                              ## Type (`type`)


                              This is the Tidepool data type representing
                              insulin pump settings at a given point in time —
                              usually the time of a data upload from the device.
                              Most insulin delivery devices do not,
                              unfortunately, keep a historical record of all
                              insulin pump settings whenever a settings change
                              is made. 


                              When ingesting data from Medtronic insulin pumps
                              through the CareLink cloud service, Tidepool has
                              been able to build the full pump settings history
                              from a combination of: current pump settings
                              records (at time of upload to CareLink); and
                              records of changes to particular settings. For
                              Medtronic devices, the time on a pump settings
                              object represents the time at which the settings
                              *became effective.* For all other devices, the
                              time on each pump settings object represents the
                              time when the settings were *read by the insulin
                              pump*.


                              The functionality available across various insulin
                              pumps on the market is generally similar, making
                              the task of standardization to a common data model
                              very simple. The major difference between pumps is
                              how many alternative settings the pump stores. 


                              For example, most pumps allow storage of multiple
                              basal schedules but only allow the storage of one
                              schedule for BG target, carb ratio, and insulin
                              sensitivity. Tidepool worked on integrating data
                              from devices of this type first, so our data model
                              assumed a single schedule for each of these
                              settings. So when Tidepool started integrating
                              data from Tandem and automatic insulin delivery
                              systems — pumps that allow the storage of several
                              schedules — we added alternate pluralized fields
                              (e.g. BG targets, carb ratios, and insulin
                              sensitivities) structured as a set of key-value
                              pairs, with the schedule names as the keys and the
                              schedules as the values. 


                              Either the singular or plural version of the field
                              must be present for a pump settings event to be
                              valid. All pump settings objects should have all
                              singular versions of these fields, or all plural
                              versions. There are no devices currently on the
                              market (that Tidepool knows of) that would be best
                              modeled with plural BG targets but singular carb
                              ratio and insulin sensitivity, for example.


                              ---


                              ## Active schedule (`activeSchedule`)


                              For Tandem pump settings, the active schedule will
                              allow a client application to identify BG targets,
                              carb ratios and insulin sensitivities, as well as
                              which of the basal schedules is active. 


                              ---


                              ## Basal schedules (`basalSchedules`)


                              Each basal schedule segment object within each
                              array value contains the following properties:


                              * [Rate](#rate-rate)

                              * [Start](#start-start)


                              ### Rate (`rate`)


                              Different insulin pump manufacturers use different
                              terminology for the set of pre-programmed and
                              timed basal rates — one of which is generally
                              running in the background during normal device
                              operation. Tidepool has adopted the term
                              "schedule" to refer to the rates covering a 24
                              hour day. There must be at least one rate in a
                              schedule; if the schedule has only one rate, we
                              often call this a "flat-rate" schedule, since the
                              same rate will always be in effect.


                              The basal schedules object encodes all of a user's
                              programmed basal schedules, where the keys on the
                              object are the basal schedule names
                              (user-customizable or manufacturer-preset) and
                              each value is a basal schedule.


                              A basal schedule, in the Tidepool data model, is
                              an array of objects, where each object has a start
                              and a rate. (We sometimes refer to each of these
                              objects that compose a schedule as a "segment" of
                              the schedule.) The rate is a typical basal rate
                              value, in units of insulin per hour. 


                              ### Start (`start`)


                              The start is an integer value representing the
                              milliseconds into a 24 hour day when the rate
                              should go into effect. Therefore, the first object
                              in the schedule must always have a start of 0 —
                              representing the start of the day at 12:00 am. 


                              All subsequent starts must be positive (they
                              cannot be a negative number) and non-zero. For
                              example, 21600000 would be the start for a basal
                              rate scheduled to go into effect at 6:00 am each
                              day when the schedule is active. Each start must
                              be < 86400000 — the number of milliseconds in 24
                              hours — as such a value would be equivalent to 0
                              (12:00 am).


                              ---


                              ## Blood glucose target (`bgTarget`)


                              Each BG target segment object in the array
                              contains a subset of the following properties:


                              * Low

                              * High

                              * Range

                              * Start

                              * Target
                          - type: callout
                            data:
                              body: >-
                                Either BG target or BG targets (but not both)
                                must be present for a pump settings object to be
                                valid.
                          - type: text
                            data: >-
                              A BG target value is used — in combination with an
                              insulin sensitivity factor in a pump's bolus
                              calculator — to calculate a recommended dose of
                              insulin to bring the person with diabetes to the
                              target.


                              The BG target array on a pump settings event
                              represents a single schedule of target blood
                              glucose values. A common-use case for scheduling
                              more than one BG target is to schedule one target
                              during the day and another higher target during
                              the night-time hours (to help prevent nocturnal
                              hypoglycemia).


                              Each segment in a BG target schedule is an object
                              with a [start](#start-start). The remaining keys
                              on each object in a BG target array vary according
                              to the pump manufacturer, but will be a subset of:
                              low, high, target and range. 


                              The representation of BG target varies across
                              insulin delivery device manufacturers as follows:


                              * Animas represents the BG target as a target
                              blood glucose and a range encoded as a single
                              value. For example, if the BG target is 6.0 and
                              the range is 2.0, any blood glucose value +range
                              or -range from the target (between 4.0 and 8.0) is
                              considered "in range" for bolus recommendation
                              calculations.

                              * Insulet represents the BG target as a target
                              blood glucose and a high threshold. For example,
                              if the BG target is 6.0 and the high threshold is
                              15.0, correction will *only* calculate if the PwDs
                              blood sugar is higher than 15.0, and will aim to
                              bring blood sugar to 6.0. 

                              * Medtronic represents the BG target as a range
                              defined by a low and a high value. For example, if
                              the lowest value is 4.0 and the highest value is
                              8.0, corrections will be calculated if blood
                              glucose is outside of this range.

                              * Tandem represents the BG target as a single
                              target blood glucose value. For example, if the BG
                              target is 6.0, a correction bolus will be
                              calculated above or below this target. 


                              Tidepool has decided to use a common range for all
                              blood glucose-related fields to reflect the range
                              offered by diabetes devices. Some of these values
                              are somewhat illogical (e.g. programming a value
                              of 0), so it is the burden on uploading clients to
                              ensure that the uploaded values are correct.


                              ---


                              ## Carb Ratio (`carbRatio`)


                              Each carb ratio segment object in the array
                              contains the following properties:


                              * Amount

                              * Start
                          - type: callout
                            data:
                              body: >-
                                Either carb ratio or carb ratios (but not both)
                                must be present for a pump settings object to be
                                valid.
                          - type: text
                            data: >-
                              An insulin-to-carb ratio value is used in an
                              insulin pump's bolus calculator — in combination
                              with a carbohydrate value input by the user — to
                              calculate a recommended dose of insulin to "cover"
                              the carbohydrates to be consumed by the PwD.


                              The carb ratio array on a pump settings event
                              represents a single schedule of insulin-to-carb
                              ratio values. A common-use case for scheduling
                              more than one carb ratio is to schedule a more
                              aggressive I:C ratio for breakfast. (Due to the
                              Dawn Phenomenon, many people with diabetes need
                              more insulin to "cover" a given number of grams of
                              carbohydrates ingested at this time of day.)


                              Each segment in a carb ratio schedule is an object
                              with a start and an amount. The
                              [start](#basal-schedules-basalschedules) is an
                              integer value representing the time into a 24-hour
                              day in milliseconds. The amount is an I:C ratio in
                              grams of carbohydrate per unit of insulin.


                              ---


                              ## Insulin sensitivity (`insulinSensitivity`)


                              Each insulin sensitivity segment object in the
                              array contains the following properties:


                              * Amount

                              * Start
                          - type: callout
                            data:
                              body: >-
                                Either insulin sensitivity or insulin
                                sensitivities (but not both) must be present for
                                a pump settings object to be valid.
                          - type: text
                            data: >-
                              An insulin sensitivity factor is used — in
                              combination with a blood glucose target in an
                              insulin pump's bolus calculator — to calculate a
                              recommended dose of insulin to bring the PwD to
                              the target.


                              The insulin sensitivity array on a pump settings
                              event represents a single schedule of insulin
                              sensitivity factors (ISFs). A common-use case for
                              scheduling more than one ISF is to dose more
                              aggressively to bring down hyperglycemia in the
                              morning hours (when the Dawn Phenomenon reduces
                              insulin sensitivity for many people with
                              diabetes).


                              Each segment in an insulin sensitivity schedule is
                              an object with a start and an amount. The
                              [start](#start-start) is an integer value
                              representing the time into a 24-hour day in
                              milliseconds. The amount is an integer or floating
                              point value (depending on whether the blood
                              glucose units are mg/dL or mmol/L), representing
                              the expected drop in blood glucose for each single
                              unit of insulin dosed.


                              On bolus calculation events, the insulin
                              sensitivity records the ISF employed in the
                              calculation. 


                              Most pumps make it possible to change the ISF for
                              the bolus *currently being calculated*, without
                              also changing the pump settings. Therefore, the
                              insulin sensitivity value on a bolus calculation
                              may not always match the expected ratio given the
                              user's insulin pump settings at the time of the
                              calculation.


                              ---


                              ## Units (`units`)


                              Contains the following properties:


                              * BG

                              * Carbs


                              The units object on a pump settings event
                              represents all relevant units for the included
                              settings.


                              For carbs, there are currently two allowed values:
                              grams and exchange. 


                              Grams is a self-explanitory value and is generally
                              the preferred unit of measurement used in newer
                              insulin pumps. However, Tidepool also offers
                              support for the now-outdated "exchange" scheme for
                              counting carbohydrates — where one exchange is
                              ~10g or ~15g of carbohydrate. Users can upload
                              carbohydrates in exchanges, however this will be
                              converted to grams upon ingestion to Platform.


                              The blood glucose value may be mg/dL or mmol/L,
                              but Platform will convert all blood glucose and
                              related values to mmol/L upon ingestion. (See
                              [units](/device-data/units) for further
                              explanation of blood glucose units.)


                              ---


                              ## Example (client)

                              ```

                              {
                                  "type": "pumpSettings",
                                  "activeSchedule": "Normal",
                                  "basalSchedules": {
                                      "Normal": [
                                          {
                                              "start": 0,
                                              "rate": 1.775
                                          },
                                          {
                                              "start": 48600000,
                                              "rate": 0.475
                                          }
                                      ],
                                      "Vacation": [
                                          {
                                              "start": 0,
                                              "rate": 1.575
                                          }
                                      ],
                                      "Weekday": [
                                          {
                                              "start": 0,
                                              "rate": 0.875
                                          },
                                          {
                                              "start": 3600000,
                                              "rate": 0.775
                                          },
                                          {
                                              "start": 63000000,
                                              "rate": 0.525
                                          }
                                      ]
                                  },
                                  "units": {
                                      "carbs": "grams",
                                      "bg": "mmol/L"
                                  },
                                  "bgTarget": [
                                      {
                                          "start": 0,
                                          "low": 4.440598392836427,
                                          "high": 8.3261219865683
                                      }
                                  ],
                                  "carbRatio": [
                                      {
                                          "amount": 21,
                                          "start": 0
                                      },
                                      {
                                          "amount": 5,
                                          "start": 10800000
                                      },
                                      {
                                          "amount": 18,
                                          "start": 25200000
                                      },
                                      {
                                          "amount": 16,
                                          "start": 63000000
                                      },
                                      {
                                          "amount": 9,
                                          "start": 73800000
                                      }
                                  ],
                                  "insulinSensitivity": [
                                      {
                                          "amount": 4.662628312478248,
                                          "start": 0
                                      },
                                      {
                                          "amount": 3.2749413147168647,
                                          "start": 61200000
                                      }
                                  ],
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:08",
                                  "guid": "b9a8484b-a90a-406a-b876-1cd3c36a01ce",
                                  "id": "c1414f92dc0a4e06bb3cc6bee6a6a491",
                                  "time": "2018-05-14T08:17:08.996Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (ingestion)

                              ```

                              {
                                  "type": "pumpSettings",
                                  "activeSchedule": "Normal",
                                  "basalSchedules": {
                                      "Normal": [
                                          {
                                              "start": 0,
                                              "rate": 1.05
                                          },
                                          {
                                              "start": 12600000,
                                              "rate": 1.25
                                          },
                                          {
                                              "start": 72000000,
                                              "rate": 1.85
                                          }
                                      ],
                                      "Sick": [
                                          {
                                              "start": 0,
                                              "rate": 0.15
                                          }
                                      ]
                                  },
                                  "units": {
                                      "carbs": "grams",
                                      "bg": "mg/dL"
                                  },
                                  "bgTargets": {
                                      "Normal": [
                                          {
                                              "start": 0,
                                              "target": 90
                                          },
                                          {
                                              "start": 28800000,
                                              "target": 85
                                          },
                                          {
                                              "start": 72000000,
                                              "target": 90
                                          }
                                      ],
                                      "Sick": [
                                          {
                                              "start": 0,
                                              "target": 90
                                          }
                                      ]
                                  },
                                  "carbRatios": {
                                      "Normal": [
                                          {
                                              "amount": 22,
                                              "start": 0
                                          }
                                      ],
                                      "Sick": [
                                          {
                                              "amount": 25,
                                              "start": 0
                                          },
                                          {
                                              "amount": 21,
                                              "start": 32400000
                                          },
                                          {
                                              "amount": 12,
                                              "start": 55800000
                                          }
                                      ]
                                  },
                                  "insulinSensitivities": {
                                      "Normal": [
                                          {
                                              "amount": 94,
                                              "start": 0
                                          }
                                      ],
                                      "Sick": [
                                          {
                                              "amount": 44,
                                              "start": 0
                                          }
                                      ]
                                  },
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:08",
                                  "time": "2018-05-14T08:17:08.997Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              ---


                              ## Example (storage)

                              ```

                              {
                                  "type": "pumpSettings",
                                  "activeSchedule": "Normal",
                                  "basalSchedules": {
                                      "Normal": [
                                          {
                                              "start": 0,
                                              "rate": 0.825
                                          },
                                          {
                                              "start": 14400000,
                                              "rate": 0.625
                                          },
                                          {
                                              "start": 82800000,
                                              "rate": 0.525
                                          }
                                      ],
                                      "Stress": [
                                          {
                                              "start": 0,
                                              "rate": 1.225
                                          },
                                          {
                                              "start": 37800000,
                                              "rate": 1.175
                                          }
                                      ],
                                      "Vacation": [
                                          {
                                              "start": 0,
                                              "rate": 1.4
                                          },
                                          {
                                              "start": 36000000,
                                              "rate": 1.525
                                          },
                                          {
                                              "start": 46800000,
                                              "rate": 0.3
                                          },
                                          {
                                              "start": 68400000,
                                              "rate": 0.925
                                          },
                                          {
                                              "start": 73800000,
                                              "rate": 0.675
                                          }
                                      ]
                                  },
                                  "units": {
                                      "carbs": "grams",
                                      "bg": "mmol/L"
                                  },
                                  "bgTarget": [
                                      {
                                          "start": 0,
                                          "target": 6.383360189702364,
                                          "high": 8.048584587016023
                                      }
                                  ],
                                  "carbRatio": [
                                      {
                                          "amount": 7,
                                          "start": 0
                                      }
                                  ],
                                  "insulinSensitivity": [
                                      {
                                          "amount": 0.7215972388359193,
                                          "start": 0
                                      },
                                      {
                                          "amount": 3.5524787142691414,
                                          "start": 9000000
                                      },
                                      {
                                          "amount": 0.7771047187463747,
                                          "start": 28800000
                                      },
                                      {
                                          "amount": 0.6660897589254641,
                                          "start": 39600000
                                      },
                                      {
                                          "amount": 3.830016113821418,
                                          "start": 61200000
                                      }
                                  ],
                                  "_active": true,
                                  "_groupId": "abcdef",
                                  "_schemaVersion": 0,
                                  "_version": 0,
                                  "clockDriftOffset": 0,
                                  "conversionOffset": 0,
                                  "createdTime": "2018-05-14T08:17:13.999Z",
                                  "deviceId": "DevId0987654321",
                                  "deviceTime": "2018-05-14T18:17:08",
                                  "guid": "7d965b73-53f3-44b0-9920-716799fbc6c8",
                                  "id": "e8b564c185484cd9b28447e6ad97a76d",
                                  "time": "2018-05-14T08:17:08.999Z",
                                  "timezoneOffset": 600,
                                  "uploadId": "SampleUploadId"
                              }

                              ```


                              --- 


                              ### Keep reading


                              * [Bolus
                              calculator](/device-data/data-types/pump-settings/calculator)

                              * [Common fields](/device-data/common-fields)

                              * [Datetime guide](/datetime)

                              * [Diabetes data types](/device-data/data-types)

                              * [Self-monitored glucose
                              (SMBG)](/device-data/data-types/pump-settings/smbg)

                              * [Units](/device-data/units)

                              * [Upload
                              metadata](/device-data/data-types/pump-settings/upload)
                        children:
                          - title: Bolus Calculator (Wizard)
                            route:
                              path: /calculator
                            data:
                              blocks:
                                - type: text
                                  data: "# Bolus calculator records (`wizard`)\n\n---\n\n### Table of contents\n\n1. [Quick summary](#quick-summary)\n2. [Type](#type-type)\n3. [Blood glucose input](#blood-glucose-input-bloodglucoseinput)\n4. [Bolus](#bolus-bolus)\n5. [Carb input](#carb-input-carbinput)\n6. [Insulin-to-carb ratio](#insulintocarb-ratio-insulintocarbratio)\n7. [Insulin on board](#insulin-on-board-insulinonboard)\n8. [Recommended](#recommended-recommended)\n\t1. [Recommended: carb](#recommended-carb-recommendedcarb)\n\t2. [Recommended: correction](#recommended-correction-recommendedcorrection)\n\t3. [Recommended: net](#recommended-net-recommendednet)\n10. [Example (client)](#example-client)\n11. [Example (ingestion)](#example-ingestion)\n12. [Example (storage)](#example-storage)\n13. [Keep reading](#keep-reading)\n\n---\n\n## Quick summary"
                                - type: jsonSchema
                                  data:
                                    $ref: './data.oas2.yml#/definitions/Calculator'
                                  header:
                                    title: Bolus calculator (wizard)
                                    subtitle: Quick summary
                                - type: text
                                  data: |
                                    ---

                                    ## Type (`type`)
                                - type: callout
                                  data:
                                    body: >-
                                      For historical reasons, this type is
                                      currently called "wizard." However,
                                      Tidepool plans to migrate to the term
                                      "bolus calculator" in a future version as
                                      wizard is a Medtronic term. 
                                - type: text
                                  data: >-
                                    The Tidepool bolus calculator event models
                                    user interactions with a bolus calculator.
                                    The bolus calculator event is intended to
                                    contain the values that were input into the
                                    `wizard`, as well as any recommendations
                                    that the calculator may have made. (This
                                    event does not automatically record whether
                                    the recommendations made were followed.)


                                    Some insulin pumps record every user
                                    interaction with the bolus calculator,
                                    regardless of whether a bolus resulted from
                                    the interaction or not. However, only user
                                    interactions with the bolus calculator *that
                                    result in a bolus event* should be uploaded
                                    to Platform, to avoid noise in the data. The
                                    resulting bolus should also be included on
                                    the bolus calculator event — see [linking
                                    events](/device-data/linking-events) for
                                    details.


                                    ---


                                    ## Blood glucose input (`bgInput`)


                                    Like all blood glucose-related fields, the
                                    BG input should be uploaded in either mg/dL
                                    or mmol/L, as appropriate to how the data is
                                    retrieved from the device. However, all
                                    values will be converted to mmol/L on
                                    ingestion.


                                    ---


                                    ## Bolus (`bolus`)


                                    Only bolus calculator events that result in
                                    a bolus should be uploaded to Platform. When
                                    uploading through Platform, the bolus should
                                    only be submitted embedded within the
                                    appropriate bolus calculator event.


                                    See [linking
                                    events](/device-data/linking-events) for
                                    more details on how events of different
                                    types are linked in Platform.


                                    ---


                                    ## Carb input (`carbInput`)


                                    Not every use of a pump's bolus calculator
                                    involves the input of carbohydrates; a user
                                    may be using the calculator to program a
                                    correction bolus. Therefore, the carb input
                                    field is optional and should only be used
                                    when relevant. 


                                    Some devices have a separate field to enter
                                    a carbohydrate value on their bolus
                                    calculators. On such devices, Tidepool omits
                                    the carb input field altogether if a value
                                    was not entered. On other devices where the
                                    carbohydrate option is always part of the
                                    calculator, Tidepool reflects this as a carb
                                    input of 0.
                                - type: callout
                                  data:
                                    body: >-
                                      Carb input does not necessarily map
                                      directly to carbohydrates consumed. A
                                      person with diabetes may consume
                                      carbohydrates that are *not* recorded
                                      through the bolus calculator: either if
                                      the user chooses to program a manual or
                                      quick bolus to "cover" carbohydrates
                                      ingested; or if the PwD consumes
                                      carbohydrates unnecessary to bolus for
                                      (e.g. carbohydrates consumed to treat
                                      hypoglycemia).
                                - type: text
                                  data: >
                                    ---


                                    ## Insulin-to-carb ratio
                                    (`insulinCarbRatio`)


                                    The insulin-to-carb (I:C) ratio is part of
                                    an insulin pump's settings. A user may
                                    program one I:C ratio to be used
                                    across-the-board, or particular ratios on a
                                    schedule per each 24-hour day. For more
                                    information on these persistent I:C ratios,
                                    see [carb
                                    ratios](/device-data/data-types/pump-settings#carb-ratio-carbratio).


                                    Most pumps make it possible to change the
                                    I:C for the bolus *currently being
                                    calculated*, without also changing the pump
                                    settings. Therefore, the insulin-to-carb
                                    ratio value on a bolus calculation may not
                                    always match the expected ratio given the
                                    user's insulin pump settings at the time of
                                    the calculation.


                                    ---


                                    ## Insulin on board (`insulinOnBoard`)


                                    The insulin on board (IOB) field  encodes
                                    the pump's estimate of how much insulin is
                                    metabolically active in the person with
                                    diabetes' system from previous boluses. Some
                                    pumps use a simple linear function for
                                    estimating the metabolic uptake and
                                    consumption of insulin, while others use
                                    more complex functions. A key benefit of
                                    using an insulin pump is the ability to
                                    track IOB in order to avoid "stacking"
                                    boluses (taking more insulin on top of a
                                    dose that is still active, possibly
                                    resulting in hypoglycemia). It is important
                                    to include insulin on board in the data to
                                    audit bolusing behavior. 


                                    On many pumps, insulin on board is also
                                    taken into account for the calculation of
                                    the [net bolus
                                    recommendation](#recommended-net-recommendednet).


                                    ---


                                    ## Recommended (`recommended`)


                                    The embedded object recommended encodes an
                                    insulin delivery device's recommendations
                                    for insulin dosing across three fields: 


                                    * [Carb](#recommended-carb-recommendedcarb)

                                    *
                                    [Correction](#recommended-correction-recommendedcorrection)

                                    * [Net](#recommended-net-recommendednet)


                                    ### Recommeded: carb (`recommended.carb`)


                                    Carb encodes the units of insulin
                                    recommended by the device to "cover" the
                                    total grams of carbohydrate input by the
                                    user into the bolus calculator. The value
                                    for carb may be > = 0, as not all boluses
                                    involve the ingestion of carbohydrates and
                                    may not include a recommended insulin dose
                                    to cover carbohydrates about to be ingested.


                                    ### Recommended: correction
                                    (`recommended.correction`)


                                    Correction encodes the units of insulin
                                    recommended by the device to bring the
                                    person with diabetes to their target BG
                                    given the input blood glucose. On some
                                    pumps, or depending on user preference, this
                                    value may be negative. A negative
                                    recommendation for correction indicates that
                                    — given the user's current blood glucose and
                                    insulin on board — low blood glucose is
                                    predicted and a reduction in insulin dosing
                                    (e.g. via a temporary basal rate) may be
                                    required in order to bring blood glucose to
                                    or within the target.


                                    ### Recommended: net (`recommended.net`)


                                    Net is the net number of units of insulin
                                    the bolus calculator recommended given the
                                    user's inputs. Generally, this net
                                    recommendation takes recommended carb,
                                    recommended correction, and insulin on board
                                    into account, but insulin delivery devices
                                    perform this calculation differently.
                                    Therefore, Tidepool has chosen to store the
                                    calculation's result, rather than make this
                                    calculation the responsibility of client
                                    applications.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "wizard",
                                        "bgInput": 2.109284236597303,
                                        "bgTarget": {
                                            "target": 5.82828539059781,
                                            "range": 1.3876869977613833
                                        },
                                        "bolus": "2eda6697f3ed430bb2d8b7c7a124fb13",
                                        "carbInput": 17,
                                        "insulinCarbRatio": 19,
                                        "insulinOnBoard": 21.949,
                                        "insulinSensitivity": 1.831746837045026,
                                        "recommended": {
                                            "carb": 1,
                                            "correction": -2.75,
                                            "net": 0
                                        },
                                        "units": "mmol/L",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:09",
                                        "guid": "757cdf1d-516d-47a3-87d3-3d4e8b71504f",
                                        "id": "09eb73043377472f82b2baf7adfdbc50",
                                        "time": "2018-05-14T08:17:09.353Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "wizard",
                                        "bgInput": 392,
                                        "bgTarget": {
                                            "target": 95,
                                            "range": 15
                                        },
                                        "bolus": {
                                            "type": "bolus",
                                            "subType": "normal",
                                            "normal": 8,
                                            "expectedNormal": 9.6,
                                            "clockDriftOffset": 0,
                                            "conversionOffset": 0,
                                            "deviceId": "DevId0987654321",
                                            "deviceTime": "2018-05-14T18:17:09",
                                            "time": "2018-05-14T08:17:09.353Z",
                                            "timezoneOffset": 600,
                                            "uploadId": "SampleUploadId"
                                        },
                                        "carbInput": 137,
                                        "insulinCarbRatio": 13,
                                        "insulinOnBoard": 24.254,
                                        "insulinSensitivity": 52,
                                        "recommended": {
                                            "carb": 10.5,
                                            "correction": 5.5,
                                            "net": 0
                                        },
                                        "units": "mg/dL",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:09",
                                        "time": "2018-05-14T08:17:09.353Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "wizard",
                                        "bgInput": 16.152676653942503,
                                        "bgTarget": {
                                            "low": 3.6079861941795968,
                                            "high": 6.938434988806917
                                        },
                                        "bolus": "22239d4d592b48ae920b28971cceb48b",
                                        "carbInput": 57,
                                        "insulinCarbRatio": 24,
                                        "insulinOnBoard": 24.265,
                                        "insulinSensitivity": 4.329583433015516,
                                        "recommended": {
                                            "carb": 2.5,
                                            "correction": 2.25,
                                            "net": 0
                                        },
                                        "units": "mmol/L",
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:14.353Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:09",
                                        "guid": "18d90ea0-5915-4e95-a8b2-cb22819ce696",
                                        "id": "087c94ccdae84eb5a76b8205a244ec6b",
                                        "time": "2018-05-14T08:17:09.353Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Datetime guide](/datetime)

                                    * [Diabetes data
                                    types](/device-data/data-types)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Self-monitored glucose
                                    (SMBG)](/device-data/data-types/pump-settings/smbg)

                                    * [Units](/device-data/units)

                                    * [Upload
                                    metadata](/device-data/data-types/pump-settings/upload)
                          - title: Self-Monitored Glucose
                            route:
                              path: /smbg
                            data:
                              blocks:
                                - type: text
                                  data: |-
                                    # Self-monitored blood glucose (`smbg`)

                                    ---

                                    ### Table of contents

                                    1. [Quick summary](#quick-summary)
                                    2. [Type](#type-type)
                                    3. [Sub-type](#subtype-subtype)
                                    4. [Example (client)](#example-client)
                                    5. [Example (ingestion)](#example-ingestion)
                                    6. [Example (storage)](#example-storage)
                                    7. [Keep reading](#keep-reading)

                                    ---

                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: >-
                                      ./data.oas2.yml#/definitions/SelfMonitoredGlucose
                                  header:
                                    title: Self-monitored blood glucose (SMBG)
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Type (`type`)


                                    This is the Tidepool data type for
                                    traditional fingerstick blood glucose meter
                                    data. SMBG is an abbreviation of
                                    "self-monitored blood glucose" and contrasts
                                    with CBG, abbreviating "continuous blood
                                    glucose." CBG is the [Tidepool data type for
                                    continuous glucose
                                    monitor](/device-data/data-types/cgm-settings)
                                    (CGM) sensor data.


                                    ---


                                    ## Sub-type (`subType`)


                                    Sub-type appears on blood glucose values
                                    that are being read from another data
                                    source, such as an insulin pump (rather than
                                    directly from a traditional fingerstick
                                    blood glucose meter).


                                    The value manual indicates that the blood
                                    glucose value was manually entered by a user
                                    (and is therefore subject to human error).


                                    The linked value indicates that the blood
                                    glucose value was transferred from a blood
                                    glucose meter to the pump directly via some
                                    sort of data transfer or pairing mechanism.
                                    If the blood glucose meter in question is
                                    also supported by Tidepool Uploader,
                                    duplicate records may exist — both read
                                    directly from the meter and pulled in as
                                    "linked" sub-type records from the insulin
                                    pump.


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "smbg",
                                        "subType": "manual",
                                        "units": "mmol/L",
                                        "value": 2.331314156239124,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:09",
                                        "guid": "2e0f1338-1537-414b-baf7-3827b6185f23",
                                        "id": "d333e9c6af694b63bb2c2cf3595acc65",
                                        "time": "2018-05-14T08:17:09.177Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "smbg",
                                        "subType": "manual",
                                        "units": "mg/dL",
                                        "value": 214,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:09",
                                        "time": "2018-05-14T08:17:09.177Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "smbg",
                                        "subType": "linked",
                                        "units": "mmol/L",
                                        "value": 14.0433924173452,
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2018-05-14T08:17:14.177Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2018-05-14T18:17:09",
                                        "guid": "2bb717e7-af53-49b1-94b0-1d93c527d9bf",
                                        "id": "a4f3f4bce5724070bb1bd9a99ed88d35",
                                        "time": "2018-05-14T08:17:09.177Z",
                                        "timezoneOffset": 600,
                                        "uploadId": "SampleUploadId"
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Bolus
                                    calculator](/device-data/data-types/pump-settings/calculator)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Datetime guide](/datetime)

                                    * [Diabetes data
                                    types](/device-data/data-types)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Units](/device-data/units)

                                    * [Upload
                                    metadata](/device-data/data-types/pump-settings/upload)
                          - title: Upload
                            route:
                              path: /upload
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    # Upload metadata (`upload`)


                                    ---


                                    ### Table of contents


                                    1. [Quick summary](#quick-summary)

                                    2. [By user](#by-user-byuser)

                                    3. [Computer
                                    time](#computer-time-computertime)

                                    4. [Device
                                    manufacturers](#device-manufacturers-devicemanufacturers)

                                    5. [Device model](#device-model-devicemodel)

                                    6. [Device serial
                                    number](#device-serial-number)

                                    7. [Device tags](#device-tags-devicetags)

                                    8. [Time
                                    processing](#time-processing-timeprocessing)

                                    9. [Timezone](#timezone-timezone)

                                    10. [Upload ID](#upload-id-uploadid)

                                    11. [Version](#version-version)

                                    12. [Example (client)](#example-client)

                                    13. [Example
                                    (ingestion)](#example-ingestion)

                                    14. [Example (storage)](#example-storage)

                                    15. [Keep reading](#keep-reading)


                                    ---


                                    ## Quick summary
                                - type: jsonSchema
                                  data:
                                    $ref: './data.oas2.yml#/definitions/Upload'
                                  header:
                                    title: Upload metadata
                                    subtitle: Quick summary
                                - type: text
                                  data: >-
                                    ---


                                    ## Type (`type`)


                                    This is the Tidepool data type most distinct
                                    from all others: instead of encoding
                                    diabetes device data, the upload type
                                    encodes metadata — about uploads of diabetes
                                    device data — to Platform.


                                    The fields under this type are:


                                    * [By User](#by-user-byuser)

                                    * [Computer
                                    time](#computer-time-computertime)

                                    * [Device
                                    manufacturers](#device-manufacturers-devicemanufacturers)

                                    * [Device model](#device-model-devicemodel)

                                    * [Device serial
                                    number](#device-serial-number-deviceserialnumber)

                                    * [Device tags](#device-tags-devicetags)

                                    * [Time
                                    processing](#time-processing-timeprocessing)

                                    * [Timezone](#timezone-timezone)

                                    * [Upload ID](#upload-id-uploadid)

                                    * [Version](#version-version)


                                    ---


                                    ## By user (`byUser`)


                                    The by user field is provided for data
                                    auditing purposes. Since Tidepool provides
                                    functionality to share data and data
                                    permissions between users — for example,
                                    between a clinician and a patient — the user
                                    that logged in and performed the device
                                    upload may not be the PwD whose data is
                                    being uploaded.


                                    ---


                                    ## Computer time (`computerTime`)


                                    The computer time field encodes the local
                                    time at upload with no timezone offset
                                    information (Tidepool stores timezone
                                    separately). We store this field to audit
                                    and/or detect the correspondence between the
                                    user's browser time and the timezone they
                                    selected at the time of upload. If the user
                                    selected the *correct* timezone for their
                                    browser, then the timezone will be converted
                                    to UTC Zulu time and then again to computer
                                    time (which should match the selected
                                    timezone). If, however, the user selected a
                                    *different* timezone from that effective in
                                    their browser, the computer time and
                                    timezone will not match.


                                    There are some cases where it is perfectly
                                    justified to select a timezone that does not
                                    reflect the browser's current timezone. For
                                    example, some insulin pump users do not
                                    change the time on their devices when
                                    traveling for short periods of time across
                                    many timezones. When uploading a device, a
                                    user should *always* choose the timezone
                                    that aligns with the most recent data on the
                                    device and therefore (in the previous
                                    example) will not match the local browser
                                    timezone.


                                    ---


                                    ## Device manufacturers
                                    (`deviceManufacurers`)


                                    To avoid confusion resulting from referring
                                    to a single manufacturer with more than one
                                    name — for example, using both "Minimed" and
                                    "Medtronic" interchangeably — Tidepool
                                    restricts device manufacturer string "tags"
                                    to those detailed in the quick summary above
                                    and enforces exact string matches (including
                                    casing). 


                                    Device manufacturers is an array of one or
                                    more string tags because  some devices are
                                    the result of manufacturer collaboration,
                                    such as the Tandem G4 insulin pump with CGM
                                    integration (a collaboration between Tandem
                                    and Dexcom).


                                    ---


                                    ## Device model (`deviceModel`)


                                    The device model is a non-empty string that
                                    encodes the model of device. We endeavor to
                                    match each manufacturer's standard for how
                                    they represent model name in terms of
                                    casing, whether parts of the name are
                                    represented as one word or two, etc.


                                    ---


                                    ## Device serial number
                                    (`deviceSerialNumber`)


                                    The device serial number is a string that
                                    encodes the serial number of the device. 
                                - type: callout
                                  data:
                                    body: >-
                                      Even if a manufacturer only uses digits in
                                      its serial numbers, the serial number
                                      should be stored as a string regardless.
                                - type: text
                                  data: >-
                                    Having the device serial number is extremely
                                    important (especially for clinical studies)
                                    and should be included whenever possible. 
                                    However, if the device serial number is
                                    unknown, the device serial number may be an
                                    empty string. 


                                    ---


                                    ## Device tags (`deviceTags`)


                                    The device tags array should be fairly
                                    self-explanatory as an array of tags
                                    indicating the function/s of a particular
                                    device. For example, the Insulet OmniPod
                                    insulin delivery system has the tags "bgm"
                                    and "insulin-pump" since the PDM (personal
                                    diabetes monitor) is both an insulin pump
                                    controller and includes a built-in blood
                                    glucose monitor.


                                    ---


                                    ## Time processing (`timeProcessing`)


                                    For data auditing purposes, Tidepool stores
                                    a string encoding the type of algorithm used
                                    to generate the time, timezone offset, and
                                    other related fields from the local device
                                    time. At present, there are only three
                                    options for this value:


                                    * **Across-the-board-timezone for devices**
                                    (all BGMs, for example) that cannot have
                                    their device time values "bootstrapped" to a
                                    UTC time value. In such cases, we apply a
                                    single user-selected timezone to every
                                    device time "across the board" to generate
                                    the time value.

                                    * **UTC-bootstrapping for devices** (most
                                    insulin pumps and CGMs) where we use a
                                    combination of the user-selected timezone
                                    (at time of upload), the most recent
                                    timestamp on the device, and the history of
                                    display time changes on the device to infer
                                    the correct time value for each record.

                                    * **None** for data sources that already
                                    include a UTC-anchored time value.
                                    Currently, the only data source for which
                                    this is true is Dexcom G5 data coming
                                    through Apple's iOS HealthKit integration.


                                    ---


                                    ## Timezone (`timezone`)


                                    The timezone is the timezone selected by the
                                    user manually in the Chrome uploader at the
                                    time of upload, or (in the case of Dexcom G5
                                    data from HealthKit), the timezone reported
                                    by the mobile device at the time of upload.
                                - type: callout
                                  data:
                                    body: >-
                                      Tidepool uses the Moment Timezone library
                                      for the implementation of both
                                      UTC-bootstrapping (in Tidepool Uploader)
                                      and in Tidepool Web. Moment Timezone
                                      includes a copy of the IANA timezone
                                      database and is updated frequently, but as
                                      Tidepool does not always reguarly update
                                      dependencies, the possible values of this
                                      field are limited to the string timezone
                                      names recognized by the IANA timezone
                                      database (included in Tidepool's current
                                      version of Moment Timezone).
                                - type: text
                                  data: >-
                                    ---


                                    ## Upload ID (`uploadId`)


                                    The upload ID is generated and returned by
                                    Platform when opening an upload session. The
                                    upload ID should be used as part of the URI
                                    when adding new data. 


                                    Upload ID should *not* be used in any POST
                                    bodies when uploading to Platform. 


                                    ---


                                    ## Version (`version`)


                                    A string identifying the software version of
                                    the uploading client. For Tidepool Uploader,
                                    this will be a semver (e.g. `1.25.2`). For
                                    other uploading clients such as Tidepool iOS
                                    applications, the format includes the
                                    namespace and semver of the app (e.g.
                                    `org.tidepool.blipnotes:1.25:2`).


                                    ---


                                    ## Example (client)

                                    ```

                                    {
                                        "type": "upload",
                                        "byUser": "154bb78230",
                                        "computerTime": "2016-06-27T18:09:55",
                                        "deviceManufacturers": "Tandems",
                                        "deviceModel": "Devicey McDeviceface",
                                        "deviceSerialNumber": "11359410",
                                        "deviceTags": [
                                            "bgm",
                                            "cgm"
                                        ],
                                        "timeProcessing": "across-the-board-timezone",
                                        "timezone": "Europe/London",
                                        "uploadId": "SampleUploadId",
                                        "version": "0.100.0",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2016-06-27T18:09:55",
                                        "guid": "e46ceaf2-e6af-4eb2-9583-3b6095f44474",
                                        "id": "eed794bbf9ec4b118f5e4c158216d45d",
                                        "time": "2016-06-28T01:09:55.131Z",
                                        "timezoneOffset": -420
                                    }

                                    ```


                                    ---


                                    ## Example (ingestion)

                                    ```

                                    {
                                        "type": "upload",
                                        "byUser": "eda1e15c6a",
                                        "computerTime": "2016-06-27T18:09:55",
                                        "deviceManufacturers": "Tandems",
                                        "deviceModel": "Devicey McDeviceface",
                                        "deviceSerialNumber": "B97B6D59",
                                        "deviceTags": [
                                            "bgm",
                                            "cgm"
                                        ],
                                        "timeProcessing": "utc-bootstrapping",
                                        "timezone": "Europe/London",
                                        "uploadId": "SampleUploadId",
                                        "version": "0.100.0",
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2016-06-27T18:09:55",
                                        "time": "2016-06-28T01:09:55.132Z",
                                        "timezoneOffset": -420
                                    }

                                    ```


                                    ---


                                    ## Example (storage)

                                    ```

                                    {
                                        "type": "upload",
                                        "byUser": "e9c6044f37",
                                        "computerTime": "2016-06-27T18:09:55",
                                        "deviceManufacturers": "Tandems",
                                        "deviceModel": "Devicey McDeviceface",
                                        "deviceSerialNumber": "59579660",
                                        "deviceTags": [
                                            "bgm",
                                            "cgm"
                                        ],
                                        "timeProcessing": "utc-bootstrapping",
                                        "timezone": "Europe/London",
                                        "uploadId": "SampleUploadId",
                                        "version": "0.100.0",
                                        "_active": true,
                                        "_groupId": "abcdef",
                                        "_schemaVersion": 0,
                                        "_version": 0,
                                        "clockDriftOffset": 0,
                                        "conversionOffset": 0,
                                        "createdTime": "2016-06-28T01:10:00.132Z",
                                        "deviceId": "DevId0987654321",
                                        "deviceTime": "2016-06-27T18:09:55",
                                        "guid": "42b5f8b1-699a-4c15-ab62-33934791ea7b",
                                        "id": "451beb9d69b64bc2a60a1696559f94d1",
                                        "time": "2016-06-28T01:09:55.132Z",
                                        "timezoneOffset": -420
                                    }

                                    ```


                                    ---


                                    ### Keep reading


                                    * [Bolus
                                    calculator](/device-data/data-types/pump-settings/calculator)

                                    * [Common
                                    fields](/device-data/common-fields)

                                    * [Datetime guide](/datetime)

                                    * [Diabetes data
                                    types](/device-data/data-types)

                                    * [Pump
                                    settings](/device-data/data-types/pump-settings)

                                    * [Self-monitored glucose
                                    (SMBG)](/device-data/data-types/pump-settings/smbg)

                                    * [Units](/device-data/units)
              - title: 'Event History [PROPOSED]'
                route:
                  path: /event-history
                data:
                  blocks:
                    - type: text
                      data: "# Event history\n\n* Use [JSON Patch](http://jsonpatch.com/) to keep event history\n* It can be applied to any of Tidepool's data base data models\n\t* It's up to the server to reject invalid event patch requests\n\n> **TBD:** Since we want event history to be immutable, we are adding the event history to the original event. Since we are not actually \"changing\" the original event, but providing a change history, we may not want to use the HTTP `PATCH` verb. We may want to make a new endpoint that \"adds\" history to an existing data event.\n\nHere is an example of a carb event that was initially a carb entry of 40g, that was changed to 60g 15 minutes later:\n```\n{\n  \"id\": \"77d722a44fa0055b20c9b988c078766f\",\n  \"name\": \"\U0001F35E\U0001F9C0\",\n  \"nutrition\": {\n    \"carbohydrate\": {\n      \"net\": 40,\n      \"units\": \"grams\",\n      \"absorptionTime\": 10870000\n    }\n  },\n  \"history\": [\n    {\n      \"time\": \"2019-08-13T10:05:19.162Z\",\n      \"changes\": [\n        {\n          \"op\": \"replace\",\n          \"path\": \"/nutrition/carbohydrate/net\",\n          \"value\": 60\n        }\n      ]\n    }\n  ],\n  \"time\": \"2019-08-13T09:50:16.751Z\",\n  \"type\": \"food\",\n  \"uploadId\": \"f7825b06f189edf3ef5afc64f07930e1\",\n  \"deviceTime\": \"2019-08-13T09:50:16.751Z\",\n  \"displayOffset\": 600\n}\n```\n\nHere is an example of a carbohydrate event that was deleted 4 minutes after initial entry:\n```\n{\n  \"id\": \"77d722a44fa0055b20c9b988c078766f\",\n  \"name\": \"\U0001F35E\U0001F9C0\",\n  \"nutrition\": {\n    \"carbohydrate\": {\n      \"net\": 40,\n      \"units\": \"grams\",\n      \"absorptionTime\": 10870000\n    }\n  },\n  \"history\": [\n    {\n      \"time\": \"2019-08-13T09:54:37.176Z\",\n      \"changes\": [\n        {\n          \"op\": \"delete\",\n          \"path\": \"\"\n        }\n      ]\n    }\n  ],\n  \"time\": \"2019-08-13T09:50:16.751Z\",\n  \"type\": \"food\",\n  \"uploadId\": \"f7825b06f189edf3ef5afc64f07930e1\",\n  \"deviceTime\": \"2019-08-13T09:50:16.751Z\",\n  \"displayOffset\": 600\n}\n```\n\nHere is an example of a carb event that was initially a carb entry of 40g, that was changed to occur at an earlier time 5 minutes after originally being entered:\n```\n{\n  \"id\": \"77d722a44fa0055b20c9b988c078766f\",\n  \"name\": \"\U0001F35E\U0001F9C0\",\n  \"nutrition\": {\n    \"carbohydrate\": {\n      \"net\": 40,\n      \"units\": \"grams\",\n      \"absorptionTime\": 10870000\n    }\n  },\n  \"history\": [\n    {\n      \"time\": \"2019-08-13T09:55:19.162Z\",\n      \"changes\": [\n        {\n          \"op\": \"replace\",\n          \"path\": \"/time\",\n          \"value\": \"2019-08-13T09:20:32.159Z\"\n        },\n        {\n          \"op\": \"replace\",\n          \"path\": \"/deviceTime\",\n          \"value\": \"2019-08-13T09:20:32.159Z\"\n        }\n      ]\n    }\n  ],\n  \"time\": \"2019-08-13T09:50:16.751Z\",\n  \"type\": \"food\",\n  \"uploadId\": \"f7825b06f189edf3ef5afc64f07930e1\",\n  \"deviceTime\": \"2019-08-13T09:50:16.751Z\",\n  \"displayOffset\": 600\n}\n```"
              - title: Linking Events
                route:
                  path: /linking-events
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Linking events


                        ---


                        ### Table of contents


                        1. [Overview](#overview)

                        2. [Potentially linked
                        events](#potentially-linked-events)

                        3. [How to link events](#how-to-link-events)

                        4. [Keep reading](#keep-reading)


                        ---

                        ## Overview


                        Not all events from diabetes management devices are
                        independent. Some events are logically related — perhaps
                        in a rough cause-and-effect relationship. In cases where
                        there is a logical connection between events, Tidepool
                        endeavors to preserve that connection in the
                        standardized form of data stored in the Tidepool cloud.


                        ---


                        ## Potentially linked events


                        * Bolus calculator (`wizard`) -> Bolus (`bolus`)

                        * Alarm (`alarm`) -> Status (`status`)

                        * Reservoir Change (`resevoirChange`) -> Status
                        (`status`)


                        ---


                        ## How to link events


                        Platform creates GUIDs for the ID of each event. This
                        means that linked events such as pairs of wizard and
                        bolus events *cannot* be uploaded separately. Instead,
                        only the "outer" event is uploaded with the "inner"
                        linked event embedded inside it. Upon ingestion of this
                        compound event, Tidepool's Platform:


                        * Generates the GUID for the inner event and stores it
                        on the inner event's ID field

                        * Extracts and stores the inner event as an independent
                        event

                        * Updates the appropriate field on the outer event to
                        contain just the GUID for the inner event instead of the
                        entire object


                        The data for ingestion via Platform looks like:


                        ```

                        [{
                          "type": "wizard",
                          "bgInput": 32,
                          "bgTarget": {
                            "target": 85,
                            "high": 145
                          },
                          "bolus": {
                            "type": "bolus",
                            "subType": "normal",
                            "normal": 1,
                            "clockDriftOffset": 0,
                            "conversionOffset": 0,
                            "deviceId": "DevId0987654321",
                            "deviceTime": "2016-06-14T10:52:45",
                            "time": "2016-06-14T17:52:45.845Z",
                            "timezoneOffset": -420,
                            "uploadId": "SampleUploadId"
                        }]

                        ```


                        The resulting data looks like: 


                        ```

                        [{
                          "type": "bolus",
                          "subType": "normal",
                          "normal": 1,
                          "clockDriftOffset": 0,
                          "conversionOffset": 0,
                          "deviceId": "DevId0987654321",
                          "deviceTime": "2016-06-14T10:52:45",
                          "time": "2016-06-14T17:52:45.845Z",
                          "timezoneOffset": -420,
                          "uploadId": "SampleUploadId",
                          "_groupId": "f4c834c27a",
                          "guid": "4c2f3acc-8d1d-4df0-bc88-2fad64df8151",
                          "id": "9006526e4d8344a3987eea1a5f327426",
                          "createdTime": "2016-06-14T18:03:50.662Z",
                          "_version": 0,
                          "_active": true,
                          "_schemaVersion": 1
                        }]

                        ```


                        ---


                        ### Keep reading


                        * [Alarm](/device-data/data-types/device-event/alarm)

                        * [Bolus](/device-data/data-types/bolus)

                        * [Bolus
                        calculator](/device-data/data-types/pump-settings-calculator)

                        * [Common fields](/device-data/common-fields)

                        * [Reservoir
                        change](/device-data/data-types/device-event/reservoir-change)

                        * [Status](/device-data/data-types/device-event/status)
              - title: Out of Range Values
                route:
                  path: /oor-values
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Out of range values 


                        ---


                        ### Table of contents


                        1. [Overview](#overview)

                        2. [Out of range annotation:
                        units](#out-of-range-annotation-units)

                        3. [Range threshold levels](#range-threshold-levels)

                        4. [Keep reading](#keep-reading)


                        ---


                        ## Overview 


                        Blood glucose meters, ketone meters and continuous
                        glucose monitors have a range within which they can
                        measure levels. When a reading falls outside of this
                        range, we need a mechanism to show that we have received
                        an out of range reading. This is done by creating a CBG,
                        SMBG or blood ketone reading with a value that is 1 unit
                        over or below the range threshold, and then annotating
                        the reading.


                        For example, for a low CGM reading for a device that
                        displays in mg/dL with a low threshold of 40 mg/dL:


                        ```

                        {
                          "type": "cbg",
                          "units": "mg/dL",
                          "value": 39,
                          "clockDriftOffset": 0,
                          "conversionOffset": 0,
                          "deviceId": "DevId0987654321",
                          "deviceTime": "2016-06-13T19:05:43",
                          "guid": "cf64b6f6-54af-4e8b-a432-08d53c2484d4",
                          "id": "da34f6f278984ae385c91cac6b91eff7",
                          "time": "2016-06-14T02:05:43.959Z",
                          "timezoneOffset": -420,
                          "uploadId": "SampleUploadId",
                          "annotations": [{
                            "code": "bg/out-of-range",
                            "value": "low",
                            "threshold": 40,
                          }]
                        }

                        ```


                        ---


                        ## Out of range annotation: units


                        Unlike all other data model types, the out of range
                        annotation does not currently include a field for units.
                        Because of this, when annotating CBG or SMBG readings,
                        the threshold should *always* be in mg/dL, even when the
                        device displays readings in mmol/L. Although an
                        unfortunate oversight, the reason for this is that all
                        devices (that Tidepool knows of) store readings in
                        mg/dL, even if they display in mmol/L. 


                        For blood ketone readings, the threshold should be a
                        value measured in mmol/L. We acknowledge that this is
                        inconvenient and inconsistent with the rest of our data
                        model, and hope to address it in the future by adding a
                        units field, similar to the field used in the CBG, SMBG
                        and blood ketone data types.


                        For example, for a high CGM reading for a device that
                        displays in mmol/L with a high threshold of 23.0 mmol/L:


                        ```

                        {
                          "type": "cbg",
                          "units": "mmol/L",
                          "value": 23.035604162838963,
                          "clockDriftOffset": 0,
                          "conversionOffset": 0,
                          "deviceId": "DevId0987654321",
                          "deviceTime": "2016-06-13T19:05:43",
                          "guid": "cf64b6f6-54af-4e8b-a432-08d53c2484d4",
                          "id": "da34f6f278984ae385c91cac6b91eff7",
                          "time": "2016-06-14T02:05:43.959Z",
                          "timezoneOffset": -420,
                          "uploadId": "SampleUploadId",
                          "annotations": [{
                            "code": "bg/out-of-range",
                            "value": "high",
                            "threshold": 414,
                          }]
                        }

                        ```


                        ---


                        ## Range threshold levels


                        If the device (or manufacturer) does not provide the
                        exact threshold levels, then the threshold field should
                        *not* be provided, and an additional
                        `[datatype]/unknown-value` annotation should be
                        provided. This is the case in our current Abbott
                        Precision Xtra driver for ketone readings:


                        ```

                        {
                          "type": "bloodKetone",
                          "units": "mmol/L",
                          "value": 10.0,
                          "clockDriftOffset": 0,
                          "conversionOffset": 0,
                          "deviceId": "DevId0987654321",
                          "deviceTime": "2016-06-13T19:05:43",
                          "guid": "ae40651d-b8e7-428e-840f-bbb3e1132569",
                          "id": "55346384504b4b76b24c60a236448012",
                          "time": "2016-06-14T02:05:43.500Z",
                          "timezoneOffset": -420,
                          "uploadId": "SampleUploadId",
                          "annotations": [{
                              "code": "ketone/out-of-range",
                              "value": "high"
                            },
                            {
                              "code": "ketone/unknown-value"
                            }
                          ]
                        }

                        ```


                        In this instance, because the threshold was unknown, we
                        used a value that we knew was out of the meter's range.


                        ---


                        ### Keep reading


                        * [Blood ketones](/device-data/data-types/blood-ketones)

                        * [Continuous blood glucose
                        (CBG)](/device-data/data-types/cbg)

                        * [CGM settings](/device-data/data-types/cgm-settings)

                        * [Self-monitored glucose
                        (SMBG)](/device/data/data-types/pump-settings/smbg)
              - title: Units
                route:
                  path: /units
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Units


                        Platform does not mutate data. Rather, data is read from
                        diabetes devices and stored in near original form while
                        still translating into the standardized Tidepool data
                        model.


                        An exception is made, however, for blood glucose data.
                        Tidepool has chosen to store blood glucose data in
                        `mmol/L` units only. Tidepool chose mmol/L because it is
                        the standard for international research and because, as
                        a floating point number, it can be converted accurately
                        to `mg/dL`, which is typically an integer. 


                        Event types that include a blood glucose value or blood
                        glucose-related value (such as an insulin sensitivity
                        factor) must also have a units field specified – either
                        mg/dL or mmol/L. When that field is **mg/dL**, upon its
                        ingestion through Platform, the value is converted to
                        **mmol/L**, the units field updated accordingly and the
                        event is stored.


                        The algorithm followed for conversion of blood
                        glucose/related values from mg/dL to mmol/L is:


                        1. If units field is **mg/dL** divide the value by
                        18.01559 (the molar mass of glucose is 180.1559)

                        2. Store the resulting floating point precision value
                        without rounding or truncation

                        3. The value has now been converted into **mmol/L**
        - title: Datetime Guide
          route:
            path: /datetime
          data:
            children:
              - title: Bootstrapping to UTC
                route:
                  path: /btutc
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Bootstrapping to UTC (BtUTC)


                        ---


                        ### Table of contents


                        1. [Overview](#overview)

                        2. [Across-the-board timezone
                        default](#acrosstheboard-timezone-default)

                        3. [Daylight Savings Time](#daylight-savings-time)

                        4. [Keep reading](#keep-reading)


                        ---
                    - type: text
                      data: >-
                        ## Overview 


                        [Bootstrapping to
                        UTC](https://github.com/tidepool-org/chrome-uploader/blob/develop/lib/TimezoneOffsetUtil.js)
                        (BtUTC) is Tidepool's method of creating an absolute
                        scale of time to track time-related data ingested
                        through Platform. This is an important tool as it can
                        help us define why, for example, an insulin pump's
                        display time is inaccurate. Is it due to Daylight
                        Savings, travel across a different timezone, user error,
                        clock drift, or something else?


                        This page contains a breakdown of each offset and
                        additional information on this extensive subject. In
                        essence, however, BtUTC is the process of converting
                        local device time into UTC Zulu time. To ensure
                        accuracy,  Platform cross-references the time from three
                        sources of information:


                        1. The timezone that applies to the user's most recent
                        data on the device (selected at the time of upload) 


                        2. The timestamp of the most recent datum on the device


                        3. The set of changes to the date & time settings on the
                        device


                        The timezone and most recent timestamp together allow us
                        to determine the offset from UTC (in minutes) of the
                        most recent data on the device. We then follow the set
                        of date & time settings changes backwards — from the
                        most recent data to the earliest data on the device —
                        and adjust the offset used to convert device local time
                        into UTC.


                        This method produces a more accurate conversion to UTC
                        than applying a timezone across-the-board because it
                        properly accounts for travel across timezones and better
                        represents the changes to and from Daylight Savings
                        Time. 


                        In its current version, BtUTC now keeps track of three
                        offsets from UTC:


                        1. [Timezone Offset](/datetime/btutc/timezone)  

                        2. [Conversion Offset](/datetime/btutc/conversion)

                        3. [Clock Drift Offset](/datetime/btutc/clock-drift)


                        ---
                    - type: text
                      data: >-
                        ## Across-the-board timezone default


                        Some traditional fingerstick blood glucose meters that
                        Tidepool supports, do not provide date & time settings
                        changes. For these devices, when Timezone Offset Utility
                        is initialized with an empty array for changes, it
                        defaults to across-the-board timezone application to
                        convert local device time into UTC time.


                        This means for any users who travel regularly (and
                        change the display time on their diabetes devices when
                        they do), if they view their data in a timezone-aware
                        display, the data from their different device may not
                        always be aligned properly. This is due to using a
                        combination of diabetes devices, some of which use BtUTC
                        and others which use across-the-board application.


                        This across-the-board timezone application applies for
                        *all* diabetes devices that have no date & time settings
                        changes. Whether this is due to a lack of date & time
                        settings data on the device (at time of upload), or
                        because the device does not store date & time settings
                        changes. This method should produce accurate UTC
                        timestamps if the correct timezone is selected by the
                        user on upload.


                        ---


                        ## Daylight Savings Time


                        For Tidepool's purposes, all that is important to
                        understand regarding [Daylight Savings
                        Time](/datetime/glossary#dst) is the following:


                        * DST is responsible for the lack of a direct 1:1
                        mapping between timezones and timezone offsets

                        * Different countries around the world change to and
                        from DST at different dates and times


                        ---


                        ### Keep Reading


                        * [BtUTC usage](/datetime/btutc/usage)

                        * [Clock drift offset](/datetime/btutc/clock-drift)

                        * [Conversion offset](/datetime/btutc/conversion)

                        * [Datetime glossary](/datetime/glossary)

                        * [Datetime guide](/datetime)

                        * [Incorrect assumptions about
                        datetime](/datetime/assumptions)

                        * [Timezone offset](/datetime/btutc/timezone)

                        * [Usage](/datetime/usage)
                  children:
                    - title: Clock Drift Offset
                      route:
                        path: /clock-drift
                      data:
                        blocks:
                          - type: text
                            data: >-
                              # Clock drift offset (`clockDriftOffset`)


                              ---


                              ### Table of contents


                              1. [Overview](#overview)

                              2. [Adjustments for clock
                              drift](#adjustments-for-clock-drift)

                              3. [Clock drift offset starts at
                              zero](#clock-drift-offset-starts-at-zero)

                              4. [Keep reading](#keep-reading)


                              ---


                              ## Overview


                              The clock drift offset was introduced to handle:


                              * Small changes (< 15 minutes) to the device
                              display time, made when the user notices the
                              device clock has “drifted” a few minutes from
                              their phone/computer/other standard clock

                              * Any change interpreted as a change to the
                              timezone offset, the difference between the offset
                              change — rounded to the nearest thirty minutes —
                              and the raw offset change


                              ---


                              ### Adjustments for clock drift


                              Diabetes devices often suffer from “clock drift,”
                              and some users are in the habit of regularly
                              correcting this drift on their devices. Clock
                              drift adjustments can happen unintentionally due
                              to the way device UIs often work: by allowing the
                              user to set only the hour and minutes in the
                              display time, changes the user makes will never be
                              precisely x number of hours earlier or later, but
                              rather x + some seconds. That difference of
                              seconds will be perceived by the BtUTC code as
                              clock drift adjustment. 


                              In the current version of BtUTC, we round time
                              changes to the nearest thirty minutes to determine
                              the timezone offset. Tidepool considers any change
                              of less than fifteen minutes a clock drift
                              adjustment. These thresholds were initially lower
                              due to fractional timezones, but increased because
                              users reported the threshold was too low. 


                              When a user adjusts the clock drift at the same
                              time as making a change related to DST or travel
                              across timezones, we factor the (rounded) value of
                              the change into the timezone offset and the
                              remainder into the clock drift offset.


                              ---


                              ### Clock Drift Offset Starts at Zero


                              An assumption built into the current code is that
                              the clock drift offset starts at zero for the most
                              recent data upload on the device. This is a
                              simplifying assumption; in most cases, there is
                              probably a small difference between the user’s
                              device time and computer time. As Tidepool
                              continues building a more robust interface, we may
                              introduce a future version that corrects for this
                              difference immediately.


                              For the current version of BtUTC, it is essential
                              the user selects the timezone that applies to the
                              most recent data on their device — *even if that
                              is not the user’s current timezone*. For example,
                              let us say a user travels from California to
                              Florida, leaving all their diabetes devices in
                              US/Pacific time but uploading from Florida. In
                              this instance, we want the user to select
                              "Pacific" as the timezone, as we would not want to
                              correct for the 3+ hour difference between device
                              time and computer time.


                              ---


                              ### Keep reading


                              * [Bootstrapping to UTC](/datetime/btutc)

                              * [BtUTC usage](/datetime/btutc/usage)

                              * [Conversion offset](/datetime/btutc/conversion)

                              * [Datetime glossary](/datetime/glossary)

                              * [Datetime guide](/datetime)

                              * [Incorrect assumptions about
                              datetime](/datetime/assumptions)

                              * [Timezone offset](/datetime/btutc/timezone)

                              * [Usage](/datetime/usage)
                    - title: Conversion Offset
                      route:
                        path: /conversion
                      data:
                        blocks:
                          - type: text
                            data: >-
                              # Conversion offset (`conversionOffset`)


                              ---


                              ### Table of contents


                              1. [Overview](#overview)

                              2. [Keep reading](#keep-reading)


                              ---


                              ## Overview


                              The conversion offset covers changes resulting
                              from incorrect set up of a device. This includes:


                              * Device set to the wrong am or pm

                              * Device set to the wrong day

                              * Device set to the wrong month

                              * Device set to the wrong year


                              The latter two of these changes — device set to
                              the wrong month or year — are reflected in the
                              stored conversion offset on each datum. In a
                              perfect world, BtUTC would also adjust the
                              conversion offset for the former two — device set
                              to the wrong day, am or pm. Unfortunately, it is
                              impossible to distinguish +/- 12 hours difference
                              between a settings change made because of the
                              device being set to the wrong time, or made due to
                              travel across timezones. 


                              The consequence of this is that the timezone
                              offset stored on a user’s data will not always
                              line up correctly with the timezone the user was
                              in when the data was generated. We are not trying
                              to infer the timezone of data generation, so this
                              is an acceptable consequence. The only timezone
                              information we store is the timezone selected by
                              the user at the time of upload, reflecting the
                              timezone of the most recent data on the device.


                              ---


                              ### Keep reading


                              * [Bootstrapping to UTC](/datetime/btutc)

                              * [BtUTC usage](/datetime/btutc/usage)

                              * [Clock drift offset](/datetime/clock-drift)

                              * [Datetime glossary](/datetime/glossary)

                              * [Datetime guide](/datetime)

                              * [Incorrect assumptions about
                              datetime](/datetime/assumptions)

                              * [Timezone offset](/datetime/btutc/timezone)

                              * [Usage](/datetime/usage)
                    - title: Timezone Offset
                      route:
                        path: /timezone
                      data:
                        blocks:
                          - type: text
                            data: "# Timezone offset (`timezoneOffset`)\n\n---\n\n### Table of contents\n\n1. [Overview](#overview)\n2. [Time field relationships](#time-field-relationships)\n3. [Finding a timezone offset](#finding-a-timezone-offset)\n4. [Upper threshold for timezone offset changes](#upper-threshold-for-timezone-changes)\n5. [Timezone offset abbreviations](#timezone-offset-abbreviations)\n6. [Keep reading](#keep-reading)\n\n---\n\n## Overview \n\nA [timezone offset](/datetime/glossary#timezone-offset) is a positive or negative integer representing an offset from [UTC](/datetime/glossary#utc) in minutes. For example, San Francisco is –480 minutes (eight hours) behind UTC, reflecting that you must *subtract* eight hours from UTC to get [the local time]( https://www.timeanddate.com/worldclock/difference.html?p1=3875). \n\nDate & time settings changes in a device’s history will factor into updates to the stored timezone offset, conversion offset, or clock drift offset.  \n\nThe original version of BtUTC only stored a timezone offset because it was primarily concerned with solving the two most common-use cases for device time changes on diabetes devices:\n\n* Changes resulting from the shift to or from [DST](/datetimes/glossary#dst)\n* Changes resulting from travel across timezones\n\nThese changes are interpreted as changes to the stored timezone offset on each datum.\n\n---\n\n## Time field relationships\n\nOverall, the relationship between the following fields in the Tidepool data model — device time, time, timezone offset, conversion offset and clock drift offset — can be generalized as follows (assuming all appropriate unit conversions have been made):\n\n```\nDevice time = time + timezone offset + conversion offset \n```\n\nIn the most current (and production) version of BtUTC, clock drift offset is stored for data auditing and provenance only.\n\n---\n\n## Finding a timezone offset\n\nIf you do not have the timezone offset for a particular datum and want to find it, you need two pieces of information:\n\n1.\tThe local timezone name\n2.\tThe local datetime OR the UTC time \n\nBecause timezones do not always map directly to timezone offsets, another anchor is needed to decide which offset associated with a named timezone to map to. Either the local datetime or the true UTC time for the datum can serve as this anchor.\n\nThe reverse is also true: Timezone offsets do not map directly to timezones. For example, Arizona does not participate in [DST](/datetime/glossary#utc) and has a timezone offset of –420 minutes to UTC year-round. Whereas neighboring New Mexico shares the same offset when DST is *not* in effect, but has an offset of –360 minutes to UTC when DST *is* in effect. \n\n---\n\n## Upper threshold for timezone offset changes\n\nIn occasional instances, a user sets the time on the diabetes device to the wrong month or year and must later correct it. We do not interpret such massive changes to the date & time settings as an adjustment to the timezone offset. Rather, whenever a date & time settings change is larger than the maximum difference possible by traveling between timezones (1,560 minutes), we apply this change as an adjustment to the [conversion offset](#conversion-offset).\n\n---\n\n## Timezone offset abbreviations\n\nThere is a set of three-letter and four-letter codes used to abbreviate timezone and timezone offset information. For example, PST (Pacific Standard Time) refers to the US/Pacific timezone, which has an offset of –480 minutes to UTC. PDT (Pacific Daylight Time) refers to the same timezone when [DST](/datetime/glossary#dst) is in effect."
                          - type: callout
                            data:
                              body: >-
                                It is important to keep these abbreviations
                                distinct from timezone names. Do not use an
                                abbreviation where a timezone is requested, and
                                vice versa.
                          - type: text
                            data: >-
                              ---


                              ### Keep Reading


                              * [Bootstrapping to UTC](/datetime/btutc)

                              * [BtUTC Usage](/datetime/btutc/usage)

                              * [Clock Drift Offset](/datetime/clock-drift)

                              * [Conversion Offset](/datetime/conversion)

                              * [Datetime Glossary](/datetime/glossary)

                              * [Datetime Guide](/datetime)

                              * [Incorrect Assumptions about
                              Datetime](/datetime/assumptions)

                              * [Usage](/datetime/usage)
                    - title: Usage
                      route:
                        path: /usage
                      data:
                        blocks:
                          - type: text
                            data: "# Usage\n\n---\n\n### Table of contents\n\n1. [Overview](#overview)\n\t1. [Import the Utility](#import-the-utility)\n\t2. [Initialize the Utility](#initialize-the-utility)\n\t3. [Employ the Utility's fill-in UTC information](#employ-the-utility's-fillin-utc-information)\n2. [Tracking the time generation method](#tracking-the-time-generation-method)\n3. [Expectations for time change events](#expectations-for-time-change-events)\n4. [Keep reading](#keep-reading)\n\n---\n\n## Overview\n\nEach device driver in the Tidepool Uploader — including for devices without date & time settings changes information — should integrate Timezone Offset Utility as the common way of generating the time, timezone offset, conversion offset, and clock drift offset fields on each datum. \n\nFor example, each driver should: import the Utility; initialize the Utility; and employ the Utility's fill-in UTC information. \n\n---\n\n### Import the Utility\n\n`var TZOUtil = require('lib/TimezoneOffsetUtil');`\n\n---\n\n### Initialize the Utility\n\nInitialize the Utility with: \n\n1. User-selected timezone. \n2. UTC timestamp of the most recent datum from the device’s history. \n3. An array of the date & time settings changes from the device’s history. (If the device does not store date & time settings changes, then an empty array should be passed).\n\n`cfg.tzoUtil = new TZOUtil(timezone, mostRecent, changes);`\n\n---\n\n### Employ the Utility's fill-in UTC information\n\nEmploy the Utility’s fill-in UTC info to fill in the: \n\n* Time\n* Timezone offset\n* Conversion offset\n* Clock drift offset \n\nTo employ this, you will need the following pieces of time-related information attached to the data:\n\n1. The device time as a string.\n(`datum.deviceTime`)\n\n2. An index representing the event’s position in the sequence device events occurred in. This sequence is structured in chronological, monotonically increasing order from earliest to latest datum.\n(`datum.index`) \n\n3. A JavaScript Date object (or equivalent) resulting from parsing the device's native datetime format using:\n\t* `sundial.buildTimestamp` or\n\t* `sundial.parseFromFormat` (usually this is the object used to produce device time via `sundial.formatDeviceTime`)\n\n```\n_.each(data, function(datum) {\n  cfg.tzoUtil.fillInUTCInfo(datum, jsDate);\n});\n```\n\n---\n\n## Tracking the time generation method\n\nEach instance of the Timezone Offset Utility keeps track of which method for generating the time field is being employed — BtUTC or [across-the-board application](/datetime/btutc#acrosstheboard-timezone-default) of a timezone. The method of time generation is publicly available through the type property on the instance (i.e. `cfg.tzoUtil.type`) and must be retrieved and provided as the time processing field of [upload metadata](/device-data/data-types/pump-settings/upload).\n\n---\n\n## Expectations for time change events\n\nThe partially-built time change events composing the array of changes is provided as the third argument to a new Timezone Offset Utility instance. All timestamps should be [ISO 8601-formatted](/datetime/glossary#iso-8601), without timezone offset information. The following listed fields should be set through use of Tidepool Uploader's object builder: \n\n* Device time = timestamp\n*\tChange = an object that itself has the following fields:\n\t* From = timestamp\n\t* To = timestamp\n\t* Method = string (optional)\n* jsDate = a JavaScript Date constructed from the **to** time\n* Index = an index (with an expectation that all indices be monotonically increasing with event order) for the datum that allows it to be sorted on the device in the order that the events actually happened (which will not match device time order in the case of date & time settings changes on the device)"
                          - type: callout
                            data:
                              body: >-
                                The index does not have to be numerical. For
                                example, in the case of [Dexcom
                                data](/device-data/data-types/cgm-settings), the
                                index is the Dexcom’s internal time, which is
                                monotonically increasing and never affected by
                                adjustments to the Dexcom’s date & time
                                settings.
                          - type: text
                            data: >-
                              The array of changes does not need to be sorted
                              before passing it into the Timezone Offset Utility
                              constructor. The changes will be mutated by the
                              Timezone Offset Utility:


                              * Time will be added (the true UTC timestamp)

                              * Timezone offset will be added

                              * Conversion offset will be added

                              * Clock drift offset will be added

                              * JavaScript Date will be deleted


                              (As a historical aside: the choice to mutate the
                              time change events makes for a somewhat deceptive
                              and/or opaque API, but this was felt to be a
                              better choice than repeating the same code
                              [effecting the mutations described above] across
                              all the device drivers. We may change this in the
                              future.)


                              The fill-in UTC info method from the usage example
                              above also mutates the object passed as its first
                              argument: adding time, timezone offset, conversion
                              offset, and clock drift offset fields. An
                              annotation may additionally be added if no index
                              was provided on the object, which results in
                              uncertainty in the determination of the correct
                              UTC timestamp. (Some diabetes devices do not
                              provide a monotonically increasing index on all
                              events in the device history.)


                              ---


                              ### Keep reading


                              * [Bootstrapping to UTC](/datetime/btutc)

                              * [Clock drift offset](/datetime/clock-drift)

                              * [Conversion offset](/datetime/conversion)

                              * [Datetime glossary](/datetime/glossary)

                              * [Datetime guide](/datetime)

                              * [Incorrect assumptions about
                              datetime](/datetime/assumptions)

                              * [Timezone offset](/datetime/btutc/timezone)
              - title: Glossary
                route:
                  path: /glossary
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Glossary


                        ---


                        ### Table of contents


                        1. [BtUTC](#btutc)

                        2. [Calendar date](#calendar-date)

                        3. [Clock time](#clock-time)

                        4. [Datetime](#datetime)

                        5. [Display time](#display-time)

                        6. [DST](#dst)

                        7. [Hammertime](#hammertime)

                        8. [ISO 8601](#iso-8601)

                        9. [PwD](#pwd)

                        10. [Timezone](#timezone)

                        11. [Timezone offset](#timezone-offset)

                        12. [Unix time](#unix-time)

                        13. [UTC](#utc)


                        ---


                        ## BtUTC

                        [Bootstrapping to UTC](/datetime/btutc) (BtUTC) is the
                        algorithm Tidepool uses to translate local device time
                        to [UTC](#utc) datetimes. 


                        ---


                        ## Calendar date


                        An object involving only date information — year, month,
                        and day — and referring to a date in the 365-day
                        Gregorian calendar; represented best in [ISO
                        8601](#iso-8601) YYYY–MM–DD format.


                        The 365-day calendar does not quite line up to
                        [UTC](#utc) because it guarantees exactly 365 days in a
                        typical year and 366 in a leap year, while UTC does not.
                        A calendar date does not include [timezone](#timezone)
                        information.


                        In Tidepool's code, there are two dates stored in a
                        [PwD's](#pwd) profile: birthday and diagnosis date.


                        Examples:

                        * 2016–01–10 (10th January 2016)

                        * 2019–08–27 (27th August 2019)


                        ---


                        ## Clock time


                        An object involving only time information — hours,
                        minutes, seconds, and sometimes milliseconds — and
                        referring to a point within a standard 24-hour day.


                        Examples:


                        * 6:05 pm in non-ISO 8601 format

                        * 18:05:00 in [ISO 8601-format](#iso-8601)

                        * 64805000 in milliseconds


                        In Tidepool front-end code, clock time is often computed
                        from a [datetime](#datetime) and then stored in
                        milliseconds as `msPer24`.


                        ---


                        ## Datetime


                        A datetime is an object involving both [clock
                        time](#clock-time) and [date](#calendar-date)
                        information. (Device time and time are both properties
                        in the Tidepool data model that encode datetimes.)


                        The terms "time" and "timestamp" can be problematic
                        because they do not transparently represent the
                        inclusion of date information. For precision and
                        clarity, we recommend using the term "datetime" when
                        both clock time and date information are part of the
                        object in question (both in documentation and in code).


                        We have borrowed this terminology from the datetime
                        package in [Python's standard
                        library](https://docs.python.org/2/library/datetime.html).


                        Examples:


                        * 11:48 pm, 25th May 2017 in non-ISO 8601 format

                        * 2017-05-25T23:48:52+00:00 in [ISO
                        8601-format](#iso-8601)


                        ---


                        ## Display time


                        A display time is a type of relative or local datetime.
                        That is, a datetime without [timezone](#timezone)
                        information and therefore not anchored to [UTC](#utc).
                        For example, if you look at a diabetes device right now,
                        you should be able to see a display time (on the
                        datetime display).


                        ---


                        ## DST

                        Daylight Savings Time (DST) is the practice of advancing
                        [clock time](#clock-time) by an hour during the summer
                        months, so that evening daylight lasts longer.


                        Many [timezones](#timezone) throughout the world observe
                        DST, but some do not. Local governments decide when the
                        shift to and away from DST occurs.


                        Examples:


                        * Most areas in Europe and North America observe DST

                        * New Zealand and parts of south-eastern Australia
                        observe DST

                        * Most areas in Africa, Asia and South America do not
                        observe DST


                        ---


                        ## Hammertime


                        A [Unix time](#unix-time) in milliseconds instead of
                        seconds.


                        Examples:


                        * 0 is the hammertime representing 12:00 am, 1st January
                        1970

                        * 1495759428000 is the hammertime representing the time
                        this documentation was written


                        Currently, there are no examples of hammertimes in the
                        data Tidepool stores. However, new front-end data
                        visualization code parses each
                        [ISO-formatted](#ISO-8601) timestamp into a hammertime
                        during the data preprocessing.


                        ---


                        ## ISO 8601

                        ISO 8601 is the International Organization for
                        Standardization's (ISO) standard covering the exchange
                        of date and time related data, which you can read about
                        [here](https://en.wikipedia.org/wiki/ISO_8601).


                        Tidepool uses ISO 8601 [datetime](#datetime) formatting
                        for calendar dates and for local and [UTC](#utc)
                        datetimes. We use the "Zulu" format with milliseconds
                        for the time field. For the relative datetime (stored in
                        the device time field), we use the date and time
                        formatting specifications to second precision. 


                        Examples:


                        * 2017-05-25T23:48:52+00:00 for datetime

                        * 2017-05-25T23:48:52.000Z for time

                        * 2017-05-25T23:48:52 for device time

                        * 11:48 pm, 25th May 2017 with 0 offset from UTC in
                        non-ISO 8601 format


                        ---


                        ## PwD

                        Person with diabetes (PwD) is used  to avoid the
                        disease-centric term "diabetic." It is very commonly
                        used throughout the diabetes community.


                        ---


                        ## Timezone


                        A timezone — sometimes referred to as a named timezone
                        or timezone name — is a string referring to a valid
                        timezone from the IANA Time Zone Database. In many
                        cases, a timezone will not match a [timezone
                        offset](#timezone-offset) year-round because of Daylight
                        Savings.
                    - type: callout
                      data:
                        body: >-
                          An abbreviation such as PDT for "Pacific Daylight
                          Time" is not a timezone since it contains both
                          timezone and timezone offset information.
                    - type: text
                      data: >
                        Examples:


                        * US/Pacific is the timezone where Tidepool's
                        headquarters are located

                        * Pacific/Easter is the timezone for the Easter Islands

                        * More timezone examples can be seen by hovering on the
                        map on [Moment
                        Timezone's](https://momentjs.com/timezone/) landing page


                        The upload type in Tidepool's data model stores a
                        timezone in the timezone property.


                        ---


                        ## Timezone offset


                        A timezone offset is a positive or negative integer
                        representing an offset from [UTC](#utc) in minutes. In
                        many cases, a [timezone](#timezone) will not match a
                        timezone offset year-round because of Daylight Savings
                        Time. 


                        Examples:

                        * The US/Pacific timezone ordinarily has an offset to
                        UTC of -480 minutes

                        * The US/Pacific timezone has an offset of -420 minutes
                        when [DST](#dst) is in effect


                        Be very careful, both in thought and in code, to keep
                        these concepts of timezone and timezone offset distinct.


                        Tidepool's data model includes a calculated (via
                        [BtUTC](#btutc)) timezone offset in timezone offset.


                        ---


                        ## Unix time


                        Unix time is a machine-friendly method for representing
                        a [datetime](#datetime), defined as the number of
                        seconds that have elapsed since 12:00 am, 1st January
                        1970. Unix time is sometimes referred to as "POSIX time"
                        or "epoch time."


                        Examples:


                        * 0 is the Unix time representing 12:00 am, 1st January
                        1970

                        * 1495760648 is the Unix time representing the time this
                        was written 


                        We don't use Unix times at Tidepool. We use
                        [hammertimes](#hammertime) instead.


                        ---


                        ## UTC


                        Coordinated Universal Time (UTC) is the primary date &
                        time standard by which planet Earth regulates clocks and
                        time.


                        UTC does not observe [DST](#dst), and is the successor
                        to Greenwich Mean Time (GMT), which is no longer a
                        functioning global standard. In the [ISO
                        8601](#iso-8601) standard, Z (for "Zulu" from the radio
                        alphabet) is shorthand for representing the UTC timezone
                        offset — which is always 0, by definition


                        In Tidepool's data model, all time fields are in UTC.


                        Examples:

                        * 2004-12-30T13:29:34+000Z in ISO 8601 format

                        * 1:29 pm, 30th December 2004 with 0 offset from UTC in
                        non-ISO 8601 format

                        * 2019-08-02T07:13:11+600 in ISO 8601 format

                        * 7:13 am, 2nd August 2019 with +600 minutes offset from
                        UTC in non-ISO 8601 format
              - title: Incorrect Assumptions
                route:
                  path: /assumptions
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Incorrect assumptions about diabetes device times


                        * The display time on a [PwD's](/datetime/glossary#pwd)
                        device will be accurate to their local time

                        * The display time will only be off by a few minutes 

                        * The display time must be an hour off because of a
                        [DST](/datetime/glossary#dst) changeover 

                        * The user will remember to change the display time
                        before the next DST changeover

                        * The display time on a PwD's device will always be the
                        correct month

                        * The display time will always be the correct year

                        * The display time will not be set to a future date

                        * The display time on a PwD's device will not be January
                        1st, 2007 or January 1st, 2008 if the user got the
                        device in 2015**

                        * Two (or more) events will not share the exact same
                        [datetime](/datetime/glossary#datetime)

                        * If a stored time field on the events from a diabetes
                        device looks like a [Unix
                        time](/datetime/glossary#unix-time), it is a Unix time


                        **These are the two most common "default" times on
                        diabetes devices. These default times surface on events
                        under various circumstances, the most common of which is
                        a clock error due to extended lack of power to the
                        device (dead battery or battery out too long). 
            blocks:
              - type: text
                data: "# Datetime guide\n\n---\n\n### Table of contents\n\n1. [Overview](#overview)\n2. [Prerequisites](#prerequisites)\n3. [Handling diabetes data](#handling-diabetes-data)\n\t1. [Handling datetimes on ingestion](#handling-datetimes-on-ingestion)\n\t2. [Handling datetimes in the API client](#handling-datetimes-in-the-api-client)\n4. [Handling broswer-local datetimes \"now\"](#handling-browserlocal-datetimes-now)\n5. [Handling user-significant dates](#handling-usersignificant-dates)\n6. [Keep reading](#keep-reading)\n\n\n---\n\n## Overview\n\nIt can be difficult to handle [datetimes](/datetime/glossary#datetime) when dealing with [DST](/datetime/glossary#dst), frequent cross-[timezone](/datetime/glossary#timezone) travel and technology operating in an always locale-aware manner. There are three main sections in this guide, each relating to a distinct type of datetime regularly encountered in the Tidepool codebase. This list will help you find the appropriate section:\n\n* **[Handling Diabetes Data](#handling-diabetes-data)**: If you are dealing with a time or a device time from a datum conforming to the Tidepool data model\n* **[Handling Browser-Local Datetimes \"Now\"](#handling-browser-local-datetimes-now)**: If you are trying to manipulate the datetime representing a user's action in the present moment — \"now\"\n* **[Handling User-Significant Dates](#handling-user-significant-dates)**: If you are working with any calendar date stored in the user's profile (such as birthday and diagnosis date)\n\n---\n\n## Prerequisites\n\n* Review the [glossary terms](/datetime/glossary)\n* Read Tidepool's [incorrect assumptions](/datetime/assumptions) about diabetes device time\n* Read through [this article](https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time) on falsehoods programmers believe about time \n\n---\n\n## Handling diabetes data\n\nNo diabetes device stores the datetimes of events that occur in [UTC](/datetime/glossary#utc) or UTC-anchored time (with the possible exception of an iPhone serving as a receiver for a Dexcom G5 CGM). To align data from multiple devices on the same timeline reliably, Tidepool has implemented an [algorithm](/datetime/btutc) to convert local device time to UTC time. \n\nFor the purposes of this document, we will be focusing on what these properties represent and can be used for:\n\n* Time is the inferred [ISO 8601-formatted](/datetime/glossary#iso-8601) UTC datetime of the event\n* Device time is an ISO 8601-formatted version of the original datetime stored on the diabetes device, only reformatted\n* [Timezone offset](/datetime/glossary#timezone-offset) is the inferred timezone offset for the event\n\nTo calculate time, you must take a relative datetime in device time and subtract the inferred timezone offset to convert the datetime to the absolute UTC scale:\n\n`time = deviceTime - timezoneOffset`\n\nFor example, a device time of 12:00 am on January 1st, 2017 for a user uploading with their device in the US/Pacific timezone, would result in an inferred timezone offset of -480 minutes:\n\n`2017-01-01T08:00:00.000Z = 2017-01-01T00:00:00 - -480`\n\nA computer would perform this calculation, having parsed the first two string representations into integer [hammertimes](/datetime/glossary#hammertime):\n\n`1483257600000 = 1483228800000 - -28800000`\n\nThis equation is true in most cases, but there are more complex edge cases as well (although they are not relevant outside of the [BtUTC algorithm](/datetime/btutc). \n\nThe user's behavior in managing the devices' display time may also cause complications. Many user interfaces on diabetes devices are not designed well, so errors can occur because they are easier to make in the interface than non-errors. Of course, issues can also arise from user inattention.\n\nIn general, it is good to approach diabetes device times with a [set of incorrect assumptions](/datetime/assumptions).\n\n---\n\n### Handling datetimes on ingestion\n\nRunning the BtUTC algorithm gets you most of the way there, but there is still a situation — plus BtUTC edge cases and bugs — that requires the engineer working on data ingestion to manipulate datetimes directly.\n\nBasal schedules and other insulin pump settings are based on a schedule that is expressed in device local time. When a user changes their device's display time settings, the schedule will follow the new display time rather than shifting. Therefore, when the ingestion process needs to look up information from a currently active schedule, the ingestion engineer must translate the event's post-BtUTC time back to a \"display time.\" This will enable the engineer to look up which segment of the currently active schedule the event falls into. \n\n---\n\n### Handling datetimes in the API client\n\nIn the API client, the guideline for handling diabetes data datetimes is quite simple: Use the time field in the Tidepool data model, in combination with the user's configured timezone preferences.\n\nWhen using [Moment.js](https://momentjs.com/) to manipulate and/or display datetimes using the time field in the Tidepool data model, in every case your usage should begin with `moment.utc(time).tz(timezone)`. For good examples of this, refer [here](https://github.com/tidepool-org/viz/blob/master/src/utils/datetime.js).\n\n---\n\n## Handling broswer-local datetimes \"now\"\n\nThe reason we cannot use JavaScript's built-in date constructor (jsDate) at Tidepool — particularly when dealing with diabetes device data — is because jsDate only handles two types of [datetime](/datetime/glossary#datetime) objects:\n\n* Browser-local datetimes\n* UTC datetimes\n\nSince Tidepool generally deals with diabetes device datetimes in a user's configured, *arbitrary* [timezone](/datetime/glossary#timezone), jsDate does not provide the required functionality, and [Moment.js](https://momentjs.com/) must be used instead.\n\nWhen handling browser-local datetimes in the present moment, however, jsDate provides exactly what is needed: a browser-local \"now.\" (This is assuming the user does not manually configure their computer to a different timezone than their geographically current timezone.)\n\nFor formatting a browser-local datetime, any tool may be used. Some people who have extensive experience with the strftime datetime-formatting API may prefer d3-time-format or using a combination of libraries.\n\n---\n\n## Handling user-significant dates\n\nCurrently, the user-significant dates in the Tidepool data model are a person with diabetes' birthday and diagnosis date. These dates are [calendar dates](/datetime/glossary#calendar-dates), and as such they do not include any timezone information. Since [UTC](/datetime/glossary#utc) is an absolute time scale that is also free from the complications of non-universal timezones, using d3-time-format can provide good examples of this.\n\n---\n\n### Keep reading\n\n* [Bootstrapping to UTC](/datetime/btutc)\n* [Datetime glossary](/datetime/glossary)\n* [Incorrect assumptions](/datetime/assumptions)"
  /api-reference:
    title: API Reference
    data:
      blocks:
        - type: text
          data: |-
            # API Reference

            * Auth API Reference
            * Data API Reference
      children:
        - title: Auth API
          route:
            path: /auth
          data:
            $ref: ./auth.oas2.yml
        - title: Data API
          route:
            path: /data
          data:
            $ref: ./data.oas2.yml
logo: 'https://www.tidepool.org/static/media/logo.f3ce0c6f.svg'
meta:
  favicon: 'https://www.tidepool.org/favicon.ico'
